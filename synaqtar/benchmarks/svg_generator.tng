// svg_generator.tng - SVG Generator for Shanraq Benchmarks
// SVG Генератор для Шанрак Бенчмарктар

import "framework/ulgi/ulgi_qozgaltqys_core.tng";

// ==================== SVG ГЕНЕРАТОР ====================

// Генерация SVG для результата бенчмарка
atqar generate_benchmark_svg(result: BenchmarkResult, timestamp: jol) -> jol {
    jasau svg: jol = "<svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">";
    
    // Фон
    svg = svg + "<rect width=\"800\" height=\"600\" fill=\"#f8f9fa\"/>";
    
    // Заголовок
    svg = svg + "<text x=\"400\" y=\"50\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"24\" font-weight=\"bold\" fill=\"#2c3e50\">" + result.algorithm + "</text>";
    svg = svg + "<text x=\"400\" y=\"80\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"14\" fill=\"#7f8c8d\">Shanraq.org Runtime - " + timestamp + "</text>";
    
    // Основной контейнер
    svg = svg + "<rect x=\"50\" y=\"120\" width=\"700\" height=\"400\" fill=\"white\" stroke=\"#bdc3c7\" stroke-width=\"2\"/>";
    
    // Заголовок результатов
    svg = svg + "<text x=\"70\" y=\"150\" font-family=\"Arial\" font-size=\"16\" font-weight=\"bold\" fill=\"#2c3e50\">Performance Results:</text>";
    
    // Основные метрики
    svg = svg + "<text x=\"70\" y=\"180\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Execution Time: " + float_to_string(result.execution_time) + " ms</text>";
    svg = svg + "<text x=\"70\" y=\"200\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Operations/sec: " + float_to_string(result.operations_per_second) + "</text>";
    svg = svg + "<text x=\"70\" y=\"220\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Memory Usage: " + float_to_string(result.memory_usage) + " MB</text>";
    
    // SIMD ускорение (если есть)
    eger (result.simd_acceleration > 1.0) {
        svg = svg + "<text x=\"70\" y=\"240\" font-family=\"Arial\" font-size=\"14\" fill=\"#27ae60\">SIMD Acceleration: " + float_to_string(result.simd_acceleration) + "x</text>";
    }
    
    // GPU ускорение (если есть)
    eger (result.gpu_acceleration > 1.0) {
        svg = svg + "<text x=\"70\" y=\"260\" font-family=\"Arial\" font-size=\"14\" fill=\"#8e44ad\">GPU Acceleration: " + float_to_string(result.gpu_acceleration) + "x</text>";
    }
    
    // Threading эффективность (если есть)
    eger (result.threading_efficiency > 0.0) {
        svg = svg + "<text x=\"70\" y=\"280\" font-family=\"Arial\" font-size=\"14\" fill=\"#e67e22\">Threading Efficiency: " + float_to_string(result.threading_efficiency) + "%</text>";
    }
    
    // Zero-copy эффективность (если есть)
    eger (result.zero_copy_efficiency > 0.0) {
        svg = svg + "<text x=\"70\" y=\"300\" font-family=\"Arial\" font-size=\"14\" fill=\"#1abc9c\">Zero-Copy Efficiency: " + float_to_string(result.zero_copy_efficiency) + "%</text>";
    }
    
    // График производительности
    jasau bar_width: san = 100;
    jasau bar_height: san = 200;
    jasau max_time: san = 1000.0;
    jasau scaled_height: san = (result.execution_time / max_time) * bar_height;
    
    // Ограничение высоты бара
    eger (scaled_height > bar_height) {
        scaled_height = bar_height;
    }
    
    svg = svg + "<rect x=\"300\" y=\"" + int_to_string(400 - scaled_height) + "\" width=\"" + int_to_string(bar_width) + "\" height=\"" + int_to_string(scaled_height) + "\" fill=\"#3498db\"/>";
    svg = svg + "<text x=\"350\" y=\"420\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"12\" fill=\"#2c3e50\">Execution Time</text>";
    
    // Дополнительные метрики справа
    svg = svg + "<text x=\"450\" y=\"180\" font-family=\"Arial\" font-size=\"12\" fill=\"#7f8c8d\">Input Size: " + int_to_string(result.input_size) + "</text>";
    svg = svg + "<text x=\"450\" y=\"200\" font-family=\"Arial\" font-size=\"12\" fill=\"#7f8c8d\">Operations: " + int_to_string(result.operations_count) + "</text>";
    
    eger (result.throughput > 0.0) {
        svg = svg + "<text x=\"450\" y=\"220\" font-family=\"Arial\" font-size=\"12\" fill=\"#7f8c8d\">Throughput: " + float_to_string(result.throughput) + " MB/s</text>";
    }
    
    eger (result.latency > 0.0) {
        svg = svg + "<text x=\"450\" y=\"240\" font-family=\"Arial\" font-size=\"12\" fill=\"#7f8c8d\">Latency: " + float_to_string(result.latency) + " ms</text>";
    }
    
    svg = svg + "</svg>";
    qaytar svg;
}

// Генерация SVG для Монте-Карло
atqar generate_monte_carlo_svg(result: BenchmarkResult, timestamp: jol) -> jol {
    jasau svg: jol = "<svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">";
    svg = svg + "<rect width=\"800\" height=\"600\" fill=\"#f8f9fa\"/>";
    svg = svg + "<text x=\"400\" y=\"50\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"24\" font-weight=\"bold\" fill=\"#2c3e50\">SIMD Monte Carlo Pi Estimation</text>";
    svg = svg + "<text x=\"400\" y=\"80\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"14\" fill=\"#7f8c8d\">Shanraq.org - " + timestamp + "</text>";
    
    // Результаты
    svg = svg + "<rect x=\"50\" y=\"120\" width=\"700\" height=\"400\" fill=\"white\" stroke=\"#bdc3c7\" stroke-width=\"2\"/>";
    svg = svg + "<text x=\"70\" y=\"150\" font-family=\"Arial\" font-size=\"16\" font-weight=\"bold\" fill=\"#2c3e50\">Performance Results:</text>";
    svg = svg + "<text x=\"70\" y=\"180\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Execution Time: " + float_to_string(result.execution_time) + " ms</text>";
    svg = svg + "<text x=\"70\" y=\"200\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Iterations: " + int_to_string(result.iterations) + "</text>";
    svg = svg + "<text x=\"70\" y=\"220\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Operations/sec: " + float_to_string(result.operations_per_second) + "</text>";
    svg = svg + "<text x=\"70\" y=\"240\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Memory Usage: " + float_to_string(result.memory_usage) + " MB</text>";
    svg = svg + "<text x=\"70\" y=\"260\" font-family=\"Arial\" font-size=\"14\" fill=\"#27ae60\">SIMD Acceleration: " + float_to_string(result.simd_acceleration) + "x</text>";
    svg = svg + "<text x=\"70\" y=\"280\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Accuracy: " + float_to_string(result.accuracy * 100) + "%</text>";
    
    // График производительности
    jasau bar_width: san = 100;
    jasau bar_height: san = 200;
    jasau max_time: san = 2000.0;
    jasau scaled_height: san = (result.execution_time / max_time) * bar_height;
    
    eger (scaled_height > bar_height) {
        scaled_height = bar_height;
    }
    
    svg = svg + "<rect x=\"300\" y=\"" + int_to_string(400 - scaled_height) + "\" width=\"" + int_to_string(bar_width) + "\" height=\"" + int_to_string(scaled_height) + "\" fill=\"#3498db\"/>";
    svg = svg + "<text x=\"350\" y=\"420\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"12\" fill=\"#2c3e50\">Performance Bar</text>";
    
    // Круговая диаграмма для точности
    svg = svg + "<circle cx=\"550\" cy=\"250\" r=\"60\" fill=\"none\" stroke=\"#bdc3c7\" stroke-width=\"8\"/>";
    jasau accuracy_angle: san = (result.accuracy * 100) * 3.6; // Процент в градусы
    svg = svg + "<path d=\"M 550 190 A 60 60 0 " + int_to_string(accuracy_angle > 180 ? 1 : 0) + " 1 " + int_to_string(550 + 60 * cos(accuracy_angle * 3.14159 / 180)) + " " + int_to_string(250 + 60 * sin(accuracy_angle * 3.14159 / 180)) + "\" fill=\"#27ae60\" stroke=\"#27ae60\" stroke-width=\"8\"/>";
    svg = svg + "<text x=\"550\" y=\"255\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"12\" fill=\"#2c3e50\">" + float_to_string(result.accuracy * 100) + "%</text>";
    
    svg = svg + "</svg>";
    qaytar svg;
}

// Генерация SVG для Фибоначчи
atqar generate_fibonacci_svg(result: BenchmarkResult, timestamp: jol) -> jol {
    jasau svg: jol = "<svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">";
    svg = svg + "<rect width=\"800\" height=\"600\" fill=\"#f8f9fa\"/>";
    svg = svg + "<text x=\"400\" y=\"50\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"24\" font-weight=\"bold\" fill=\"#2c3e50\">SIMD Fibonacci Benchmark</text>";
    svg = svg + "<text x=\"400\" y=\"80\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"14\" fill=\"#7f8c8d\">Shanraq.org - " + timestamp + "</text>";
    
    // Результаты
    svg = svg + "<rect x=\"50\" y=\"120\" width=\"700\" height=\"400\" fill=\"white\" stroke=\"#bdc3c7\" stroke-width=\"2\"/>";
    svg = svg + "<text x=\"70\" y=\"150\" font-family=\"Arial\" font-size=\"16\" font-weight=\"bold\" fill=\"#2c3e50\">Performance Results:</text>";
    svg = svg + "<text x=\"70\" y=\"180\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Execution Time: " + float_to_string(result.execution_time) + " ms</text>";
    svg = svg + "<text x=\"70\" y=\"200\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Input Size: " + int_to_string(result.input_size) + "</text>";
    svg = svg + "<text x=\"70\" y=\"220\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Operations/sec: " + float_to_string(result.operations_per_second) + "</text>";
    svg = svg + "<text x=\"70\" y=\"240\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Memory Usage: " + float_to_string(result.memory_usage) + " MB</text>";
    svg = svg + "<text x=\"70\" y=\"260\" font-family=\"Arial\" font-size=\"14\" fill=\"#27ae60\">SIMD Acceleration: " + float_to_string(result.simd_acceleration) + "x</text>";
    
    // График производительности
    jasau bar_width: san = 100;
    jasau bar_height: san = 200;
    jasau max_time: san = 100.0;
    jasau scaled_height: san = (result.execution_time / max_time) * bar_height;
    
    eger (scaled_height > bar_height) {
        scaled_height = bar_height;
    }
    
    svg = svg + "<rect x=\"300\" y=\"" + int_to_string(400 - scaled_height) + "\" width=\"" + int_to_string(bar_width) + "\" height=\"" + int_to_string(scaled_height) + "\" fill=\"#e74c3c\"/>";
    svg = svg + "<text x=\"350\" y=\"420\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"12\" fill=\"#2c3e50\">Performance Bar</text>";
    
    svg = svg + "</svg>";
    qaytar svg;
}

// Генерация SVG для QuickSort
atqar generate_quicksort_svg(result: BenchmarkResult, timestamp: jol) -> jol {
    jasau svg: jol = "<svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">";
    svg = svg + "<rect width=\"800\" height=\"600\" fill=\"#f8f9fa\"/>";
    svg = svg + "<text x=\"400\" y=\"50\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"24\" font-weight=\"bold\" fill=\"#2c3e50\">SIMD QuickSort Benchmark</text>";
    svg = svg + "<text x=\"400\" y=\"80\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"14\" fill=\"#7f8c8d\">Shanraq.org - " + timestamp + "</text>";
    
    // Результаты
    svg = svg + "<rect x=\"50\" y=\"120\" width=\"700\" height=\"400\" fill=\"white\" stroke=\"#bdc3c7\" stroke-width=\"2\"/>";
    svg = svg + "<text x=\"70\" y=\"150\" font-family=\"Arial\" font-size=\"16\" font-weight=\"bold\" fill=\"#2c3e50\">Performance Results:</text>";
    svg = svg + "<text x=\"70\" y=\"180\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Execution Time: " + float_to_string(result.execution_time) + " ms</text>";
    svg = svg + "<text x=\"70\" y=\"200\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Array Size: " + int_to_string(result.input_size) + "</text>";
    svg = svg + "<text x=\"70\" y=\"220\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Operations/sec: " + float_to_string(result.operations_per_second) + "</text>";
    svg = svg + "<text x=\"70\" y=\"240\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Memory Usage: " + float_to_string(result.memory_usage) + " MB</text>";
    svg = svg + "<text x=\"70\" y=\"260\" font-family=\"Arial\" font-size=\"14\" fill=\"#27ae60\">SIMD Acceleration: " + float_to_string(result.simd_acceleration) + "x</text>";
    
    // График производительности
    jasau bar_width: san = 100;
    jasau bar_height: san = 200;
    jasau max_time: san = 500.0;
    jasau scaled_height: san = (result.execution_time / max_time) * bar_height;
    
    eger (scaled_height > bar_height) {
        scaled_height = bar_height;
    }
    
    svg = svg + "<rect x=\"300\" y=\"" + int_to_string(400 - scaled_height) + "\" width=\"" + int_to_string(bar_width) + "\" height=\"" + int_to_string(scaled_height) + "\" fill=\"#f39c12\"/>";
    svg = svg + "<text x=\"350\" y=\"420\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"12\" fill=\"#2c3e50\">Performance Bar</text>";
    
    svg = svg + "</svg>";
    qaytar svg;
}

// Генерация SVG для матричного умножения
atqar generate_matrix_svg(result: BenchmarkResult, timestamp: jol) -> jol {
    jasau svg: jol = "<svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">";
    svg = svg + "<rect width=\"800\" height=\"600\" fill=\"#f8f9fa\"/>";
    svg = svg + "<text x=\"400\" y=\"50\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"24\" font-weight=\"bold\" fill=\"#2c3e50\">SIMD Matrix Multiplication</text>";
    svg = svg + "<text x=\"400\" y=\"80\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"14\" fill=\"#7f8c8d\">Shanraq.org - " + timestamp + "</text>";
    
    // Результаты
    svg = svg + "<rect x=\"50\" y=\"120\" width=\"700\" height=\"400\" fill=\"white\" stroke=\"#bdc3c7\" stroke-width=\"2\"/>";
    svg = svg + "<text x=\"70\" y=\"150\" font-family=\"Arial\" font-size=\"16\" font-weight=\"bold\" fill=\"#2c3e50\">Performance Results:</text>";
    svg = svg + "<text x=\"70\" y=\"180\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Execution Time: " + float_to_string(result.execution_time) + " ms</text>";
    svg = svg + "<text x=\"70\" y=\"200\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Matrix Size: " + int_to_string(result.input_size) + " elements</text>";
    svg = svg + "<text x=\"70\" y=\"220\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Operations/sec: " + float_to_string(result.operations_per_second) + "</text>";
    svg = svg + "<text x=\"70\" y=\"240\" font-family=\"Arial\" font-size=\"14\" fill=\"#34495e\">Memory Usage: " + float_to_string(result.memory_usage) + " MB</text>";
    svg = svg + "<text x=\"70\" y=\"260\" font-family=\"Arial\" font-size=\"14\" fill=\"#27ae60\">SIMD Acceleration: " + float_to_string(result.simd_acceleration) + "x</text>";
    
    // График производительности
    jasau bar_width: san = 100;
    jasau bar_height: san = 200;
    jasau max_time: san = 2000.0;
    jasau scaled_height: san = (result.execution_time / max_time) * bar_height;
    
    eger (scaled_height > bar_height) {
        scaled_height = bar_height;
    }
    
    svg = svg + "<rect x=\"300\" y=\"" + int_to_string(400 - scaled_height) + "\" width=\"" + int_to_string(bar_width) + "\" height=\"" + int_to_string(scaled_height) + "\" fill=\"#9b59b6\"/>";
    svg = svg + "<text x=\"350\" y=\"420\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"12\" fill=\"#2c3e50\">Performance Bar</text>";
    
    svg = svg + "</svg>";
    qaytar svg;
}

// ==================== ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ====================

// Создание директории результатов
atqar create_results_directory() -> void {
    create_directory("results");
}

// Сохранение SVG файла
atqar save_svg_file(filename: jol, content: jol) -> void {
    jasau filepath: jol = "results/" + filename;
    write_file(filepath, content);
}

// Санитизация имени файла
atqar sanitize_filename(algorithm: jol) -> jol {
    jasau sanitized: jol = algorithm;
    sanitized = sanitized.replace(" ", "_");
    sanitized = sanitized.replace("(", "");
    sanitized = sanitized.replace(")", "");
    sanitized = sanitized.replace("/", "_");
    sanitized = sanitized.replace(":", "_");
    sanitized = sanitized.replace("-", "_");
    qaytar sanitized;
}

// Конвертация чисел в строки
atqar int_to_string(value: san) -> jol {
    qaytar number_to_string(value);
}

atqar float_to_string(value: san) -> jol {
    qaytar number_to_string(value);
}

// Запись файла
atqar write_file(filepath: jol, content: jol) -> void {
    file_write(filepath, content);
}

// Создание директории
atqar create_directory(path: jol) -> void {
    mkdir(path);
}

// Математические функции
atqar cos(angle: san) -> san {
    qaytar math_cos(angle);
}

atqar sin(angle: san) -> san {
    qaytar math_sin(angle);
}


