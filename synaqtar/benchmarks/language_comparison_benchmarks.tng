// language_comparison_benchmarks.tng - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —è–∑—ã–∫–∞–º–∏
// Language Comparison Benchmarks

// ==================== –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ====================

// –î–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
struct LanguageBenchmarkData {
    language: jol;
    monte_carlo_ops_per_sec: san;
    fibonacci_time_ms: san;
    quicksort_time_ms: san;
    matrix_mult_time_ms: san;
    crud_ops_per_sec: san;
    memory_usage_mb: san;
    compilation_time_ms: san;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
atqar get_language_comparison_data() -> Array<LanguageBenchmarkData> {
    jasau languages: Array<LanguageBenchmarkData> = array_jasau(6);
    
    // C (GCC -O3)
    languages[0].language = "C (GCC -O3)";
    languages[0].monte_carlo_ops_per_sec = 50000000;
    languages[0].fibonacci_time_ms = 0.001;
    languages[0].quicksort_time_ms = 2.5;
    languages[0].matrix_mult_time_ms = 15.2;
    languages[0].crud_ops_per_sec = 1000000;
    languages[0].memory_usage_mb = 2.1;
    languages[0].compilation_time_ms = 120;
    
    // C++ (GCC -O3)
    languages[1].language = "C++ (GCC -O3)";
    languages[1].monte_carlo_ops_per_sec = 48000000;
    languages[1].fibonacci_time_ms = 0.0012;
    languages[1].quicksort_time_ms = 2.8;
    languages[1].matrix_mult_time_ms = 16.8;
    languages[1].crud_ops_per_sec = 950000;
    languages[1].memory_usage_mb = 2.8;
    languages[1].compilation_time_ms = 180;
    
    // Rust (Release)
    languages[2].language = "Rust (Release)";
    languages[2].monte_carlo_ops_per_sec = 45000000;
    languages[2].fibonacci_time_ms = 0.0015;
    languages[2].quicksort_time_ms = 3.2;
    languages[2].matrix_mult_time_ms = 18.5;
    languages[2].crud_ops_per_sec = 900000;
    languages[2].memory_usage_mb = 2.5;
    languages[2].compilation_time_ms = 250;
    
    // Go (1.21)
    languages[3].language = "Go (1.21)";
    languages[3].monte_carlo_ops_per_sec = 35000000;
    languages[3].fibonacci_time_ms = 0.002;
    languages[3].quicksort_time_ms = 4.5;
    languages[3].matrix_mult_time_ms = 25.2;
    languages[3].crud_ops_per_sec = 800000;
    languages[3].memory_usage_mb = 4.2;
    languages[3].compilation_time_ms = 80;
    
    // Zig (0.11)
    languages[4].language = "Zig (0.11)";
    languages[4].monte_carlo_ops_per_sec = 42000000;
    languages[4].fibonacci_time_ms = 0.0018;
    languages[4].quicksort_time_ms = 3.8;
    languages[4].matrix_mult_time_ms = 19.5;
    languages[4].crud_ops_per_sec = 850000;
    languages[4].memory_usage_mb = 2.3;
    languages[4].compilation_time_ms = 150;
    
    // Shanraq.org (Tenge)
    languages[5].language = "Shanraq.org (Tenge)";
    languages[5].monte_carlo_ops_per_sec = 0; // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    languages[5].fibonacci_time_ms = 0;
    languages[5].quicksort_time_ms = 0;
    languages[5].matrix_mult_time_ms = 0;
    languages[5].crud_ops_per_sec = 0;
    languages[5].memory_usage_mb = 0;
    languages[5].compilation_time_ms = 0;
    
    qaytar languages;
}

// ==================== –ë–ï–ù–ß–ú–ê–†–ö–ò SHANRAQ.ORG ====================

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –¥–ª—è Shanraq.org
atqar run_shanraq_benchmarks() -> LanguageBenchmarkData {
    korset("üöÄ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ Shanraq.org...");
    
    jasau shanraq_data: LanguageBenchmarkData;
    shanraq_data.language = "Shanraq.org (Tenge)";
    
    // –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –±–µ–Ω—á–º–∞—Ä–∫
    korset("üìä –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ —Å–∏–º—É–ª—è—Ü–∏—è...");
    jasau monte_result: BenchmarkResult = monte_carlo_benchmark(10000000);
    shanraq_data.monte_carlo_ops_per_sec = monte_result.operations_per_second;
    
    // –§–∏–±–æ–Ω–∞—á—á–∏ –±–µ–Ω—á–º–∞—Ä–∫
    korset("üî¢ –§–∏–±–æ–Ω–∞—á—á–∏ —Ç–µ—Å—Ç...");
    jasau fib_result: BenchmarkResult = fibonacci_benchmark(40);
    shanraq_data.fibonacci_time_ms = fib_result.execution_time * 1000;
    
    // –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    korset("üìà –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–µ—Å—Ç...");
    jasau sort_result: BenchmarkResult = quicksort_benchmark(100000);
    shanraq_data.quicksort_time_ms = sort_result.execution_time * 1000;
    
    // –ú–∞—Ç—Ä–∏—á–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ
    korset("üî¢ –ú–∞—Ç—Ä–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...");
    jasau matrix_result: BenchmarkResult = matrix_multiplication_benchmark(500);
    shanraq_data.matrix_mult_time_ms = matrix_result.execution_time * 1000;
    
    // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
    korset("üíæ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏...");
    jasau crud_result: BenchmarkResult = crud_create_benchmark(10000);
    shanraq_data.crud_ops_per_sec = crud_result.operations_per_second;
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    shanraq_data.memory_usage_mb = get_memory_usage() / (1024 * 1024);
    
    // –í—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
    jasau compile_start: san = time_now();
    // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∫–æ–º–ø–∏–ª—è—Ü–∏—è Tenge –∫–æ–¥–∞
    jasau compile_end: san = time_now();
    shanraq_data.compilation_time_ms = (compile_end - compile_start) * 1000;
    
    korset("‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫–∏ Shanraq.org –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
    qaytar shanraq_data;
}

// ==================== –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ====================

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
atqar compare_performance() -> PerformanceComparison {
    jasau languages: Array<LanguageBenchmarkData> = get_language_comparison_data();
    jasau shanraq_data: LanguageBenchmarkData = run_shanraq_benchmarks();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Shanraq.org
    languages[5] = shanraq_data;
    
    jasau comparison: PerformanceComparison;
    comparison.languages = languages;
    comparison.best_performer = find_best_performer(languages);
    comparison.shanraq_ranking = calculate_shanraq_ranking(languages);
    comparison.improvement_suggestions = generate_improvement_suggestions(shanraq_data, languages);
    
    qaytar comparison;
}

// –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
atqar find_best_performer(languages: Array<LanguageBenchmarkData>) -> jol {
    jasau best_score: san = 0.0;
    jasau best_language: jol = "";
    
    for (jasau i: san = 0; i < languages.length; i++) {
        jasau score: san = calculate_performance_score(languages[i]);
        eger (score > best_score) {
            best_score = score;
            best_language = languages[i].language;
        }
    }
    
    qaytar best_language;
}

// –†–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ Shanraq.org
atqar calculate_shanraq_ranking(languages: Array<LanguageBenchmarkData>) -> san {
    jasau shanraq_score: san = calculate_performance_score(languages[5]);
    jasau better_count: san = 0;
    
    for (jasau i: san = 0; i < 5; i++) {
        jasau other_score: san = calculate_performance_score(languages[i]);
        eger (other_score > shanraq_score) {
            better_count++;
        }
    }
    
    qaytar 6 - better_count; // –†–µ–π—Ç–∏–Ω–≥ (1-6)
}

// –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
atqar calculate_performance_score(data: LanguageBenchmarkData) -> san {
    jasau score: san = 0.0;
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ
    score += (data.monte_carlo_ops_per_sec / 50000000.0) * 0.2;
    score += (1.0 / (data.fibonacci_time_ms / 0.001)) * 0.2;
    score += (1.0 / (data.quicksort_time_ms / 2.5)) * 0.2;
    score += (1.0 / (data.matrix_mult_time_ms / 15.2)) * 0.2;
    score += (data.crud_ops_per_sec / 1000000.0) * 0.2;
    
    qaytar score;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
atqar generate_improvement_suggestions(shanraq_data: LanguageBenchmarkData, all_languages: Array<LanguageBenchmarkData>) -> Array<jol> {
    jasau suggestions: Array<jol> = array_jasau(10);
    jasau suggestion_count: san = 0;
    
    // –ê–Ω–∞–ª–∏–∑ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ
    eger (shanraq_data.monte_carlo_ops_per_sec < 40000000) {
        suggestions[suggestion_count] = "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ";
        suggestion_count++;
    }
    
    // –ê–Ω–∞–ª–∏–∑ –§–∏–±–æ–Ω–∞—á—á–∏
    eger (shanraq_data.fibonacci_time_ms > 0.002) {
        suggestions[suggestion_count] = "–£–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –§–∏–±–æ–Ω–∞—á—á–∏ —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π";
        suggestion_count++;
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    eger (shanraq_data.quicksort_time_ms > 4.0) {
        suggestions[suggestion_count] = "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏";
        suggestion_count++;
    }
    
    // –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—Ä–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    eger (shanraq_data.matrix_mult_time_ms > 20.0) {
        suggestions[suggestion_count] = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SIMD –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –º–∞—Ç—Ä–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π";
        suggestion_count++;
    }
    
    // –ê–Ω–∞–ª–∏–∑ CRUD
    eger (shanraq_data.crud_ops_per_sec < 800000) {
        suggestions[suggestion_count] = "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö";
        suggestion_count++;
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏
    eger (shanraq_data.memory_usage_mb > 3.0) {
        suggestions[suggestion_count] = "–£–º–µ–Ω—å—à–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏";
        suggestion_count++;
    }
    
    // –û–±—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    suggestions[suggestion_count] = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–ø–∏–ª—è—Ü–∏—é –≤ –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ–¥";
    suggestion_count++;
    suggestions[suggestion_count] = "–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É";
    suggestion_count++;
    suggestions[suggestion_count] = "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä–∫—É –º—É—Å–æ—Ä–∞";
    suggestion_count++;
    suggestions[suggestion_count] = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —É–∑–∫–∏—Ö –º–µ—Å—Ç";
    suggestion_count++;
    
    qaytar suggestions;
}

// ==================== –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• ====================

struct PerformanceComparison {
    languages: Array<LanguageBenchmarkData>;
    best_performer: jol;
    shanraq_ranking: san;
    improvement_suggestions: Array<jol>;
    detailed_analysis: jol;
    recommendations: Array<jol>;
}

// ==================== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó ====================

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
atqar create_detailed_analysis(comparison: PerformanceComparison) -> jol {
    jasau analysis: jol = "";
    
    analysis = analysis + "=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===\n\n";
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    analysis = analysis + "1. –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –í–´–ß–ò–°–õ–ï–ù–ò–Ø:\n";
    analysis = analysis + "   - –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ: Shanraq.org vs C/C++/Rust\n";
    analysis = analysis + "   - –§–∏–±–æ–Ω–∞—á—á–∏: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤\n";
    analysis = analysis + "   - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞\n\n";
    
    analysis = analysis + "2. –ë–ê–ó–ê –î–ê–ù–ù–´–•:\n";
    analysis = analysis + "   - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏: –°–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ\n";
    analysis = analysis + "   - –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É\n";
    analysis = analysis + "   - –ó–∞–¥–µ—Ä–∂–∫–∞: –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞\n\n";
    
    analysis = analysis + "3. –ü–ê–ú–Ø–¢–¨:\n";
    analysis = analysis + "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —è–∑—ã–∫–∞–º–∏\n";
    analysis = analysis + "   - –£—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏: –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ\n";
    analysis = analysis + "   - –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n\n";
    
    analysis = analysis + "4. –ö–û–ú–ü–ò–õ–Ø–¶–ò–Ø:\n";
    analysis = analysis + "   - –í—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å C/C++/Rust\n";
    analysis = analysis + "   - –†–∞–∑–º–µ—Ä –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞\n";
    analysis = analysis + "   - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞\n\n";
    
    qaytar analysis;
}

// ==================== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ====================

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
atqar generate_recommendations(comparison: PerformanceComparison) -> Array<jol> {
    jasau recommendations: Array<jol> = array_jasau(15);
    jasau rec_count: san = 0;
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    recommendations[rec_count] = "–í–Ω–µ–¥—Ä–∏—Ç—å JIT-–∫–æ–º–ø–∏–ª—è—Ü–∏—é –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—á–∞—Å—Ç–∫–æ–≤ –∫–æ–¥–∞";
    rec_count++;
    recommendations[rec_count] = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SIMD –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π";
    rec_count++;
    recommendations[rec_count] = "–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –ø–æ–º–æ—â—å—é –ø–æ—Ç–æ–∫–æ–≤";
    rec_count++;
    recommendations[rec_count] = "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø–∞–º—è—Ç—å—é –∏ —Å–±–æ—Ä–∫—É –º—É—Å–æ—Ä–∞";
    rec_count++;
    recommendations[rec_count] = "–í–Ω–µ–¥—Ä–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö";
    rec_count++;
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
    recommendations[rec_count] = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ";
    rec_count++;
    recommendations[rec_count] = "–í–Ω–µ–¥—Ä–∏—Ç—å –ø—É–ª—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö";
    rec_count++;
    recommendations[rec_count] = "–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏";
    rec_count++;
    recommendations[rec_count] = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —É–∑–∫–∏—Ö –º–µ—Å—Ç";
    rec_count++;
    recommendations[rec_count] = "–í–Ω–µ–¥—Ä–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ";
    rec_count++;
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    recommendations[rec_count] = "–°–æ–∑–¥–∞—Ç—å –±–µ–Ω—á–º–∞—Ä–∫-—Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è";
    rec_count++;
    recommendations[rec_count] = "–í–Ω–µ–¥—Ä–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Ç–µ—Å—Ç–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏";
    rec_count++;
    recommendations[rec_count] = "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏";
    rec_count++;
    recommendations[rec_count] = "–°–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏";
    rec_count++;
    recommendations[rec_count] = "–í–Ω–µ–¥—Ä–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏";
    rec_count++;
    
    qaytar recommendations;
}
