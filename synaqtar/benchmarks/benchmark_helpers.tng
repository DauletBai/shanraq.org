// benchmark_helpers.tng - Вспомогательные функции для бенчмарков
// Benchmark Helper Functions

// ==================== ДОПОЛНИТЕЛЬНЫЕ БЕНЧМАРКИ ====================

// Численное интегрирование
atqar numerical_integration_benchmark() -> BenchmarkResult {
    jasau start_time: san = time_now();
    
    // Интегрирование функции sin(x) от 0 до π
    jasau n: san = 1000000;
    jasau h: san = 3.14159265359 / n;
    jasau sum: san = 0.0;
    
    for (jasau i: san = 0; i < n; i++) {
        jasau x: san = i * h;
        sum += sin(x);
    }
    
    jasau result: san = sum * h;
    jasau end_time: san = time_now();
    jasau execution_time: san = end_time - start_time;
    
    jasau benchmark_result: BenchmarkResult = benchmark_result_jasau();
    benchmark_result.algorithm = "Numerical Integration";
    benchmark_result.iterations = n;
    benchmark_result.execution_time = execution_time;
    benchmark_result.operations_per_second = n / execution_time;
    benchmark_result.accuracy = abs(result - 2.0) / 2.0;
    benchmark_result.memory_usage = get_memory_usage();
    
    qaytar benchmark_result;
}

// Статистические вычисления
atqar statistical_calculations_benchmark() -> BenchmarkResult {
    jasau start_time: san = time_now();
    
    // Генерация данных
    jasau data_size: san = 1000000;
    jasau data: Array<san> = array_jasau(data_size);
    
    for (jasau i: san = 0; i < data_size; i++) {
        data[i] = random_float() * 100.0;
    }
    
    // Вычисление статистик
    jasau mean: san = calculate_mean(data, data_size);
    jasau variance: san = calculate_variance(data, data_size, mean);
    jasau std_dev: san = sqrt(variance);
    jasau median: san = calculate_median(data, data_size);
    
    jasau end_time: san = time_now();
    jasau execution_time: san = end_time - start_time;
    
    jasau result: BenchmarkResult = benchmark_result_jasau();
    result.algorithm = "Statistical Calculations";
    result.input_size = data_size;
    result.execution_time = execution_time;
    result.operations_per_second = data_size / execution_time;
    result.memory_usage = get_memory_usage();
    
    qaytar result;
}

// Комплексные CRUD операции
atqar complex_crud_benchmark() -> BenchmarkResult {
    jasau start_time: san = time_now();
    jasau connection: DatabaseConnection = sqlite_connection_jasau("complex_benchmark.db");
    
    // Создание сложной схемы
    sql_execute(connection, "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, email TEXT)");
    sql_execute(connection, "CREATE TABLE IF NOT EXISTS orders (id INTEGER PRIMARY KEY, user_id INTEGER, amount REAL)");
    sql_execute(connection, "CREATE TABLE IF NOT EXISTS products (id INTEGER PRIMARY KEY, name TEXT, price REAL)");
    
    // Комплексные операции
    for (jasau i: san = 0; i < 1000; i++) {
        // Создание пользователя
        sql_execute(connection, "INSERT INTO users (name, email) VALUES (?, ?)", "User" + int_to_string(i), "user" + int_to_string(i) + "@shanraq.org");
        
        // Создание заказа
        sql_execute(connection, "INSERT INTO orders (user_id, amount) VALUES (?, ?)", i, random_float() * 1000.0);
        
        // Создание продукта
        sql_execute(connection, "INSERT INTO products (name, price) VALUES (?, ?)", "Product" + int_to_string(i), random_float() * 100.0);
        
        // Сложный запрос
        jasau query_result: QueryResult = sql_query(connection, 
            "SELECT u.name, o.amount, p.name FROM users u " +
            "JOIN orders o ON u.id = o.user_id " +
            "JOIN products p ON p.id = ? WHERE u.id = ?", i, i);
        query_result_close(query_result);
    }
    
    jasau end_time: san = time_now();
    jasau execution_time: san = end_time - start_time;
    
    jasau result: BenchmarkResult = benchmark_result_jasau();
    result.algorithm = "Complex CRUD Operations";
    result.operations_count = 1000;
    result.execution_time = execution_time;
    result.operations_per_second = 1000 / execution_time;
    result.memory_usage = get_memory_usage();
    
    qaytar result;
}

// Транзакции
atqar transaction_benchmark() -> BenchmarkResult {
    jasau start_time: san = time_now();
    jasau connection: DatabaseConnection = sqlite_connection_jasau("transaction_benchmark.db");
    
    // Создание таблицы
    sql_execute(connection, "CREATE TABLE IF NOT EXISTS accounts (id INTEGER PRIMARY KEY, balance REAL)");
    
    // Транзакции
    for (jasau i: san = 0; i < 1000; i++) {
        sql_begin_transaction(connection);
        
        // Создание счета
        sql_execute(connection, "INSERT INTO accounts (balance) VALUES (?)", 1000.0);
        
        // Перевод денег
        sql_execute(connection, "UPDATE accounts SET balance = balance - ? WHERE id = ?", 100.0, i);
        sql_execute(connection, "UPDATE accounts SET balance = balance + ? WHERE id = ?", 100.0, i + 1);
        
        sql_commit_transaction(connection);
    }
    
    jasau end_time: san = time_now();
    jasau execution_time: san = end_time - start_time;
    
    jasau result: BenchmarkResult = benchmark_result_jasau();
    result.algorithm = "Database Transactions";
    result.operations_count = 1000;
    result.execution_time = execution_time;
    result.operations_per_second = 1000 / execution_time;
    result.memory_usage = get_memory_usage();
    
    qaytar result;
}

// WebSocket бенчмарк
atqar websocket_benchmark() -> BenchmarkResult {
    jasau start_time: san = time_now();
    
    // Симуляция WebSocket соединений
    jasau connections: san = 100;
    jasau messages_per_connection: san = 100;
    
    for (jasau i: san = 0; i < connections; i++) {
        for (jasau j: san = 0; j < messages_per_connection; j++) {
            // Симуляция отправки сообщения
            jasau message: jol = "WebSocket message " + int_to_string(j);
            // Обработка сообщения
            process_websocket_message(message);
        }
    }
    
    jasau end_time: san = time_now();
    jasau execution_time: san = end_time - start_time;
    
    jasau result: BenchmarkResult = benchmark_result_jasau();
    result.algorithm = "WebSocket Connections";
    result.operations_count = connections * messages_per_connection;
    result.execution_time = execution_time;
    result.operations_per_second = (connections * messages_per_connection) / execution_time;
    result.memory_usage = get_memory_usage();
    
    qaytar result;
}

// API эндпоинты бенчмарк
atqar api_endpoints_benchmark() -> BenchmarkResult {
    jasau start_time: san = time_now();
    
    // Тестирование различных API эндпоинтов
    jasau endpoints: Array<jol> = array_jasau(5);
    endpoints[0] = "/api/v1/health";
    endpoints[1] = "/api/v1/status";
    endpoints[2] = "/api/v1/statistics";
    endpoints[3] = "/api/v1/paydalanusylar";
    endpoints[4] = "/api/v1/maqalalar";
    
    jasau requests_per_endpoint: san = 200;
    
    for (jasau i: san = 0; i < endpoints.length; i++) {
        for (jasau j: san = 0; j < requests_per_endpoint; j++) {
            // Симуляция HTTP запроса
            jasau response: HttpResponse = http_get("http://localhost:8080" + endpoints[i]);
            http_response_close(response);
        }
    }
    
    jasau end_time: san = time_now();
    jasau execution_time: san = end_time - start_time;
    
    jasau result: BenchmarkResult = benchmark_result_jasau();
    result.algorithm = "API Endpoints";
    result.operations_count = endpoints.length * requests_per_endpoint;
    result.execution_time = execution_time;
    result.operations_per_second = (endpoints.length * requests_per_endpoint) / execution_time;
    result.memory_usage = get_memory_usage();
    
    qaytar result;
}

// ==================== ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ====================

// Вычисление среднего значения
atqar calculate_mean(data: Array<san>, size: san) -> san {
    jasau sum: san = 0.0;
    for (jasau i: san = 0; i < size; i++) {
        sum += data[i];
    }
    qaytar sum / size;
}

// Вычисление дисперсии
atqar calculate_variance(data: Array<san>, size: san, mean: san) -> san {
    jasau sum: san = 0.0;
    for (jasau i: san = 0; i < size; i++) {
        jasau diff: san = data[i] - mean;
        sum += diff * diff;
    }
    qaytar sum / size;
}

// Вычисление медианы
atqar calculate_median(data: Array<san>, size: san) -> san {
    // Простая сортировка для медианы
    quicksort(data, 0, size - 1);
    
    eger (size % 2 == 0) {
        qaytar (data[size / 2 - 1] + data[size / 2]) / 2.0;
    } else {
        qaytar data[size / 2];
    }
}

// Обработка WebSocket сообщения
atqar process_websocket_message(message: jol) -> void {
    // Симуляция обработки сообщения
    jasau length: san = string_length(message);
    // Простая обработка
    for (jasau i: san = 0; i < length; i++) {
        jasau char: jol = string_char_at(message, i);
        // Обработка символа
    }
}

// ==================== АНАЛИЗ ПРОИЗВОДИТЕЛЬНОСТИ ====================

// Анализ производительности
atqar analyze_performance(report: BenchmarkReport) -> PerformanceAnalysis {
    jasau analysis: PerformanceAnalysis;
    
    // Расчет общего балла
    analysis.overall_score = calculate_overall_score(report);
    
    // Определение сильных сторон
    analysis.strengths = identify_strengths(report);
    
    // Определение слабых сторон
    analysis.weaknesses = identify_weaknesses(report);
    
    // Определение узких мест
    analysis.bottlenecks = identify_bottlenecks(report);
    
    // Потенциал оптимизации
    analysis.optimization_potential = calculate_optimization_potential(report);
    
    qaytar analysis;
}

// Расчет общего балла
atqar calculate_overall_score(report: BenchmarkReport) -> san {
    jasau score: san = 0.0;
    jasau weight: san = 0.0;
    
    // Веса для разных категорий
    jasau financial_weight: san = 0.3;
    jasau crud_weight: san = 0.4;
    jasau network_weight: san = 0.3;
    
    // Нормализация и взвешивание
    score += normalize_score(report.financial_math_results.monte_carlo.operations_per_second, 50000000) * financial_weight;
    score += normalize_score(report.crud_database_results.create_benchmark.operations_per_second, 1000000) * crud_weight;
    score += normalize_score(report.network_results.http_requests.operations_per_second, 10000) * network_weight;
    
    qaytar score * 100; // Процент
}

// Нормализация балла
atqar normalize_score(value: san, max_value: san) -> san {
    eger (value > max_value) {
        qaytar 1.0;
    }
    qaytar value / max_value;
}

// Определение сильных сторон
atqar identify_strengths(report: BenchmarkReport) -> Array<jol> {
    jasau strengths: Array<jol> = array_jasau(10);
    jasau count: san = 0;
    
    // Анализ результатов
    eger (report.financial_math_results.monte_carlo.operations_per_second > 40000000) {
        strengths[count] = "Высокая производительность математических вычислений";
        count++;
    }
    
    eger (report.crud_database_results.create_benchmark.operations_per_second > 800000) {
        strengths[count] = "Эффективная работа с базой данных";
        count++;
    }
    
    eger (report.network_results.http_requests.operations_per_second > 8000) {
        strengths[count] = "Быстрая обработка сетевых запросов";
        count++;
    }
    
    eger (report.financial_math_results.fibonacci.execution_time < 0.002) {
        strengths[count] = "Оптимизированные алгоритмы";
        count++;
    }
    
    eger (report.crud_database_results.transactions.operations_per_second > 500) {
        strengths[count] = "Надежная обработка транзакций";
        count++;
    }
    
    qaytar strengths;
}

// Определение слабых сторон
atqar identify_weaknesses(report: BenchmarkReport) -> Array<jol> {
    jasau weaknesses: Array<jol> = array_jasau(10);
    jasau count: san = 0;
    
    // Анализ результатов
    eger (report.financial_math_results.monte_carlo.operations_per_second < 30000000) {
        weaknesses[count] = "Низкая производительность математических вычислений";
        count++;
    }
    
    eger (report.crud_database_results.create_benchmark.operations_per_second < 600000) {
        weaknesses[count] = "Медленная работа с базой данных";
        count++;
    }
    
    eger (report.network_results.http_requests.operations_per_second < 5000) {
        weaknesses[count] = "Медленная обработка сетевых запросов";
        count++;
    }
    
    eger (report.financial_math_results.fibonacci.execution_time > 0.005) {
        weaknesses[count] = "Неоптимизированные алгоритмы";
        count++;
    }
    
    eger (report.crud_database_results.transactions.operations_per_second < 300) {
        weaknesses[count] = "Медленная обработка транзакций";
        count++;
    }
    
    qaytar weaknesses;
}

// Определение узких мест
atqar identify_bottlenecks(report: BenchmarkReport) -> Array<jol> {
    jasau bottlenecks: Array<jol> = array_jasau(10);
    jasau count: san = 0;
    
    // Анализ узких мест
    eger (report.financial_math_results.matrix_multiplication.execution_time > 0.020) {
        bottlenecks[count] = "Матричные операции требуют оптимизации";
        count++;
    }
    
    eger (report.crud_database_results.complex_operations.execution_time > 0.010) {
        bottlenecks[count] = "Сложные запросы к базе данных";
        count++;
    }
    
    eger (report.network_results.json_parsing.execution_time > 0.005) {
        bottlenecks[count] = "Парсинг JSON данных";
        count++;
    }
    
    eger (report.financial_math_results.statistical_calculations.execution_time > 0.015) {
        bottlenecks[count] = "Статистические вычисления";
        count++;
    }
    
    qaytar bottlenecks;
}

// Расчет потенциала оптимизации
atqar calculate_optimization_potential(report: BenchmarkReport) -> san {
    jasau potential: san = 0.0;
    
    // Анализ потенциала по категориям
    potential += analyze_financial_potential(report.financial_math_results);
    potential += analyze_crud_potential(report.crud_database_results);
    potential += analyze_network_potential(report.network_results);
    
    qaytar potential / 3.0; // Средний потенциал
}

// Анализ потенциала финансовых вычислений
atqar analyze_financial_potential(results: FinancialMathResults) -> san {
    jasau potential: san = 0.0;
    
    // Монте-Карло
    eger (results.monte_carlo.operations_per_second < 40000000) {
        potential += 0.3;
    }
    
    // Фибоначчи
    eger (results.fibonacci.execution_time > 0.002) {
        potential += 0.2;
    }
    
    // Матричные операции
    eger (results.matrix_multiplication.execution_time > 0.020) {
        potential += 0.3;
    }
    
    // Статистика
    eger (results.statistical_calculations.execution_time > 0.015) {
        potential += 0.2;
    }
    
    qaytar potential;
}

// Анализ потенциала CRUD
atqar analyze_crud_potential(results: CRUDDatabaseResults) -> san {
    jasau potential: san = 0.0;
    
    // Создание
    eger (results.create_benchmark.operations_per_second < 800000) {
        potential += 0.2;
    }
    
    // Чтение
    eger (results.read_benchmark.operations_per_second < 1000000) {
        potential += 0.2;
    }
    
    // Обновление
    eger (results.update_benchmark.operations_per_second < 600000) {
        potential += 0.2;
    }
    
    // Удаление
    eger (results.delete_benchmark.operations_per_second < 800000) {
        potential += 0.2;
    }
    
    // Транзакции
    eger (results.transactions.operations_per_second < 500) {
        potential += 0.2;
    }
    
    qaytar potential;
}

// Анализ потенциала сетевых операций
atqar analyze_network_potential(results: NetworkResults) -> san {
    jasau potential: san = 0.0;
    
    // HTTP запросы
    eger (results.http_requests.operations_per_second < 8000) {
        potential += 0.3;
    }
    
    // JSON парсинг
    eger (results.json_parsing.operations_per_second < 5000) {
        potential += 0.3;
    }
    
    // WebSocket
    eger (results.websocket_connections.operations_per_second < 3000) {
        potential += 0.2;
    }
    
    // API эндпоинты
    eger (results.api_endpoints.operations_per_second < 6000) {
        potential += 0.2;
    }
    
    qaytar potential;
}

// Генерация детального отчета
atqar generate_detailed_report(report: BenchmarkReport) -> jol {
    jasau detailed_report: jol = "";
    
    detailed_report = detailed_report + "=== ДЕТАЛЬНЫЙ ОТЧЕТ БЕНЧМАРКОВ SHANRAQ.ORG ===\n\n";
    
    // Общая информация
    detailed_report = detailed_report + "Проект: " + report.project_name + "\n";
    detailed_report = detailed_report + "Версия: " + report.version + "\n";
    detailed_report = detailed_report + "Время: " + report.timestamp + "\n\n";
    
    // Финансово-математические результаты
    detailed_report = detailed_report + "=== ФИНАНСОВО-МАТЕМАТИЧЕСКИЕ РЕЗУЛЬТАТЫ ===\n";
    detailed_report = detailed_report + "Монте-Карло: " + float_to_string(report.financial_math_results.monte_carlo.operations_per_second) + " оп/сек\n";
    detailed_report = detailed_report + "Фибоначчи: " + float_to_string(report.financial_math_results.fibonacci.execution_time * 1000) + " мс\n";
    detailed_report = detailed_report + "Быстрая сортировка: " + float_to_string(report.financial_math_results.quicksort.execution_time * 1000) + " мс\n";
    detailed_report = detailed_report + "Матричное умножение: " + float_to_string(report.financial_math_results.matrix_multiplication.execution_time * 1000) + " мс\n\n";
    
    // CRUD результаты
    detailed_report = detailed_report + "=== CRUD БАЗА ДАННЫХ РЕЗУЛЬТАТЫ ===\n";
    detailed_report = detailed_report + "Создание: " + float_to_string(report.crud_database_results.create_benchmark.operations_per_second) + " оп/сек\n";
    detailed_report = detailed_report + "Чтение: " + float_to_string(report.crud_database_results.read_benchmark.operations_per_second) + " оп/сек\n";
    detailed_report = detailed_report + "Обновление: " + float_to_string(report.crud_database_results.update_benchmark.operations_per_second) + " оп/сек\n";
    detailed_report = detailed_report + "Удаление: " + float_to_string(report.crud_database_results.delete_benchmark.operations_per_second) + " оп/сек\n\n";
    
    // Сетевые результаты
    detailed_report = detailed_report + "=== СЕТЕВЫЕ РЕЗУЛЬТАТЫ ===\n";
    detailed_report = detailed_report + "HTTP запросы: " + float_to_string(report.network_results.http_requests.operations_per_second) + " оп/сек\n";
    detailed_report = detailed_report + "JSON парсинг: " + float_to_string(report.network_results.json_parsing.operations_per_second) + " оп/сек\n";
    detailed_report = detailed_report + "WebSocket: " + float_to_string(report.network_results.websocket_connections.operations_per_second) + " оп/сек\n\n";
    
    // Анализ производительности
    detailed_report = detailed_report + "=== АНАЛИЗ ПРОИЗВОДИТЕЛЬНОСТИ ===\n";
    detailed_report = detailed_report + "Общий балл: " + float_to_string(report.performance_analysis.overall_score) + "/100\n";
    detailed_report = detailed_report + "Потенциал оптимизации: " + float_to_string(report.performance_analysis.optimization_potential * 100) + "%\n\n";
    
    qaytar detailed_report;
}
