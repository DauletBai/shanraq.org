// Demo Runner
// Демо іске қосу
// Comprehensive demonstration runner for all demo cases

// Demo configuration
struct DemoConfig {
    run_p2p_demo: aqıqat;
    run_acquiring_demo: aqıqat;
    run_reconciliation_demo: aqıqat;
    verbose_output: aqıqat;
    generate_reports: aqıqat;
}

// Demo results
struct DemoResults {
    p2p_demo_success: aqıqat;
    acquiring_demo_success: aqıqat;
    reconciliation_demo_success: aqıqat;
    total_demos: san;
    successful_demos: san;
    failed_demos: san;
    execution_time: san;
}

// Main demo runner
atqar run_all_demos(config: DemoConfig) -> DemoResults {
    jasau results: DemoResults = demo_results_create();
    jasau start_time: san = get_current_timestamp();
    
    results.total_demos = 0;
    results.successful_demos = 0;
    results.failed_demos = 0;
    
    print("🎯 Shanraq.org Comprehensive Demo Suite");
    print("=======================================");
    print("");
    print("📋 Demo Configuration:");
    print("   P2P Transfer Demo: " + config.run_p2p_demo);
    print("   Acquiring Demo: " + config.run_acquiring_demo);
    print("   Reconciliation Demo: " + config.run_reconciliation_demo);
    print("   Verbose Output: " + config.verbose_output);
    print("   Generate Reports: " + config.generate_reports);
    print("");
    
    // Run P2P Transfer Demo
    eger (config.run_p2p_demo) {
        print("🚀 Running P2P Transfer Demo...");
        print("================================");
        
        eger (p2p_transfer_demo()) {
            results.p2p_demo_success = aqıqat;
            results.successful_demos++;
            print("✅ P2P Transfer Demo completed successfully!");
        } else {
            results.p2p_demo_success = jin;
            results.failed_demos++;
            print("❌ P2P Transfer Demo failed!");
        }
        
        results.total_demos++;
        print("");
    }
    
    // Run Acquiring Demo
    eger (config.run_acquiring_demo) {
        print("🚀 Running Acquiring Demo...");
        print("============================");
        
        eger (acquiring_demo()) {
            results.acquiring_demo_success = aqıqat;
            results.successful_demos++;
            print("✅ Acquiring Demo completed successfully!");
        } else {
            results.acquiring_demo_success = jin;
            results.failed_demos++;
            print("❌ Acquiring Demo failed!");
        }
        
        results.total_demos++;
        print("");
    }
    
    // Run Reconciliation Demo
    eger (config.run_reconciliation_demo) {
        print("🚀 Running Reconciliation Demo...");
        print("=================================");
        
        eger (reconciliation_demo()) {
            results.reconciliation_demo_success = aqıqat;
            results.successful_demos++;
            print("✅ Reconciliation Demo completed successfully!");
        } else {
            results.reconciliation_demo_success = jin;
            results.failed_demos++;
            print("❌ Reconciliation Demo failed!");
        }
        
        results.total_demos++;
        print("");
    }
    
    // Calculate execution time
    jasau end_time: san = get_current_timestamp();
    results.execution_time = end_time - start_time;
    
    // Generate summary report
    print("📊 Demo Execution Summary");
    print("========================");
    print("   Total Demos: " + results.total_demos);
    print("   Successful: " + results.successful_demos);
    print("   Failed: " + results.failed_demos);
    print("   Success Rate: " + ((results.successful_demos * 100) / results.total_demos) + "%");
    print("   Execution Time: " + results.execution_time + " ms");
    print("");
    
    // Generate reports if requested
    eger (config.generate_reports) {
        generate_demo_reports(results);
    }
    
    qaytar results;
}

// Generate demo reports
atqar generate_demo_reports(results: DemoResults) -> aqıqat {
    print("📄 Generating Demo Reports...");
    print("=============================");
    
    // Generate CSV report
    jasau csv_content: jol = "Demo,Status,Execution Time (ms)\n";
    csv_content = csv_content + "P2P Transfer," + results.p2p_demo_success + "," + results.execution_time + "\n";
    csv_content = csv_content + "Acquiring," + results.acquiring_demo_success + "," + results.execution_time + "\n";
    csv_content = csv_content + "Reconciliation," + results.reconciliation_demo_success + "," + results.execution_time + "\n";
    
    file_write("demo_results.csv", csv_content);
    print("   ✅ CSV report generated: demo_results.csv");
    
    // Generate JSON report
    jasau json_report: JsonObject = json_object_create();
    json_object_set_boolean(json_report, "p2p_demo_success", results.p2p_demo_success);
    json_object_set_boolean(json_report, "acquiring_demo_success", results.acquiring_demo_success);
    json_object_set_boolean(json_report, "reconciliation_demo_success", results.reconciliation_demo_success);
    json_object_set_integer(json_report, "total_demos", results.total_demos);
    json_object_set_integer(json_report, "successful_demos", results.successful_demos);
    json_object_set_integer(json_report, "failed_demos", results.failed_demos);
    json_object_set_integer(json_report, "execution_time", results.execution_time);
    json_object_set_string(json_report, "timestamp", get_current_timestamp_string());
    
    json_object_write_to_file(json_report, "demo_results.json");
    print("   ✅ JSON report generated: demo_results.json");
    
    // Generate summary report
    jasau summary_content: jol = "# Shanraq.org Demo Results\n\n";
    summary_content = summary_content + "## Summary\n\n";
    summary_content = summary_content + "- **Total Demos**: " + results.total_demos + "\n";
    summary_content = summary_content + "- **Successful**: " + results.successful_demos + "\n";
    summary_content = summary_content + "- **Failed**: " + results.failed_demos + "\n";
    summary_content = summary_content + "- **Success Rate**: " + ((results.successful_demos * 100) / results.total_demos) + "%\n";
    summary_content = summary_content + "- **Execution Time**: " + results.execution_time + " ms\n\n";
    
    summary_content = summary_content + "## Demo Results\n\n";
    summary_content = summary_content + "| Demo | Status |\n";
    summary_content = summary_content + "|------|--------|\n";
    summary_content = summary_content + "| P2P Transfer | " + (results.p2p_demo_success ? "✅ Success" : "❌ Failed") + " |\n";
    summary_content = summary_content + "| Acquiring | " + (results.acquiring_demo_success ? "✅ Success" : "❌ Failed") + " |\n";
    summary_content = summary_content + "| Reconciliation | " + (results.reconciliation_demo_success ? "✅ Success" : "❌ Failed") + " |\n";
    
    file_write("demo_summary.md", summary_content);
    print("   ✅ Summary report generated: demo_summary.md");
    
    print("");
    print("📊 All demo reports generated successfully!");
    qaytar aqıqat;
}

// Quick demo runner
atqar quick_demo() -> aqıqat {
    jasau config: DemoConfig = demo_config_create();
    config.run_p2p_demo = aqıqat;
    config.run_acquiring_demo = aqıqat;
    config.run_reconciliation_demo = aqıqat;
    config.verbose_output = aqıqat;
    config.generate_reports = aqıqat;
    
    jasau results: DemoResults = run_all_demos(config);
    
    eger (results.successful_demos == results.total_demos) {
        print("🎉 All demos completed successfully!");
        qaytar aqıqat;
    } else {
        print("⚠️  Some demos failed. Check the logs for details.");
        qaytar jin;
    }
}

// Full demo runner with all features
atqar full_demo() -> aqıqat {
    jasau config: DemoConfig = demo_config_create();
    config.run_p2p_demo = aqıqat;
    config.run_acquiring_demo = aqıqat;
    config.run_reconciliation_demo = aqıqat;
    config.verbose_output = aqıqat;
    config.generate_reports = aqıqat;
    
    jasau results: DemoResults = run_all_demos(config);
    
    eger (results.successful_demos == results.total_demos) {
        print("🎉 Full demo suite completed successfully!");
        print("📄 Reports generated in current directory");
        qaytar aqıqat;
    } else {
        print("⚠️  Some demos failed. Check the logs for details.");
        qaytar jin;
    }
}

// Main function
atqar main() -> san {
    print("🎯 Shanraq.org Demo Runner");
    print("==========================");
    print("");
    print("Available demo modes:");
    print("  1. Quick Demo - Run all demos with basic output");
    print("  2. Full Demo - Run all demos with detailed output and reports");
    print("");
    
    // Run quick demo by default
    eger (quick_demo()) {
        print("✅ Quick demo completed successfully!");
        qaytar 0;
    } else {
        print("❌ Quick demo failed!");
        qaytar 1;
    }
}
