// Acquiring Demo
// Эквайринг демо
// Demonstration of payment acquiring and processing

// Demo scenario: Merchant processes customer payment
atqar acquiring_demo() -> aqıqat {
    print("🚀 Starting Acquiring Demo");
    print("===========================");
    
    // Initialize acquiring system
    jasau acquiring_system: AcquiringSystem = acquiring_system_create();
    acquiring_system.initialize();
    
    // Demo merchant and customer
    jasau merchant_id: san = 2001;
    jasau customer_id: san = 3001;
    jasau payment_amount: Decimal128 = decimal128_from_string("1500.00");
    
    print("🏪 Merchant ID: " + merchant_id);
    print("👤 Customer ID: " + customer_id);
    print("💰 Payment Amount: " + payment_amount + " KZT");
    print("");
    
    // Create payment request
    jasau payment_request: PaymentRequest = payment_request_create();
    payment_request.merchant_id = merchant_id;
    payment_request.customer_id = customer_id;
    payment_request.amount = payment_amount;
    payment_request.currency = "KZT";
    payment_request.payment_method = "CARD";
    payment_request.description = "Demo payment";
    
    print("💳 Processing payment...");
    
    // Process payment
    jasau payment_response: PaymentResponse = acquiring_system.payment_ishke_engizu(payment_request);
    
    // Display results
    eger (payment_response.success) {
        print("✅ Payment successful!");
        print("🆔 Payment ID: " + payment_response.payment_id);
        print("💰 Amount: " + payment_response.amount + " KZT");
        print("💳 Payment Method: " + payment_response.payment_method);
        print("📅 Timestamp: " + payment_response.timestamp);
    } else {
        print("❌ Payment failed!");
        print("💬 Error: " + payment_response.message);
    }
    
    print("");
    print("📊 Acquiring demo completed!");
    qaytar aqıqat;
}

// Demo payment methods
atqar payment_methods_demo() -> aqıqat {
    print("🚀 Starting Payment Methods Demo");
    print("==================================");
    
    jasau acquiring_system: AcquiringSystem = acquiring_system_create();
    acquiring_system.initialize();
    
    // Demo payment methods
    jasau payment_methods: Array<jol> = array_create();
    array_append(payment_methods, "CARD");
    array_append(payment_methods, "QR");
    array_append(payment_methods, "WALLET");
    array_append(payment_methods, "CRYPTO");
    
    jasau merchant_id: san = 2001;
    jasau customer_id: san = 3001;
    jasau amount: Decimal128 = decimal128_from_string("1000.00");
    
    print("🏪 Merchant ID: " + merchant_id);
    print("👤 Customer ID: " + customer_id);
    print("💰 Amount: " + amount + " KZT");
    print("");
    
    jasau successful_payments: san = 0;
    jasau total_payments: san = array_length(payment_methods);
    
    eger (i = 0; i < array_length(payment_methods); i++) {
        jasau payment_method: jol = payment_methods[i];
        
        print("💳 Testing payment method: " + payment_method);
        
        // Create payment request
        jasau payment_request: PaymentRequest = payment_request_create();
        payment_request.merchant_id = merchant_id;
        payment_request.customer_id = customer_id;
        payment_request.amount = amount;
        payment_request.currency = "KZT";
        payment_request.payment_method = payment_method;
        payment_request.description = "Demo " + payment_method + " payment";
        
        // Process payment
        jasau payment_response: PaymentResponse = acquiring_system.payment_ishke_engizu(payment_request);
        
        eger (payment_response.success) {
            successful_payments++;
            print("   ✅ Success: " + payment_response.payment_id);
        } else {
            print("   ❌ Failed: " + payment_response.message);
        }
        
        print("");
    }
    
    print("📊 Payment Methods Demo Results:");
    print("   Total Payment Methods: " + total_payments);
    print("   Successful: " + successful_payments);
    print("   Failed: " + (total_payments - successful_payments));
    print("   Success Rate: " + ((successful_payments * 100) / total_payments) + "%");
    
    qaytar aqıqat;
}

// Demo refund processing
atqar refund_demo() -> aqıqat {
    print("🚀 Starting Refund Demo");
    print("========================");
    
    jasau acquiring_system: AcquiringSystem = acquiring_system_create();
    acquiring_system.initialize();
    
    // First, process a payment
    jasau merchant_id: san = 2001;
    jasau customer_id: san = 3001;
    jasau payment_amount: Decimal128 = decimal128_from_string("2000.00");
    
    print("💳 Processing initial payment...");
    
    jasau payment_request: PaymentRequest = payment_request_create();
    payment_request.merchant_id = merchant_id;
    payment_request.customer_id = customer_id;
    payment_request.amount = payment_amount;
    payment_request.currency = "KZT";
    payment_request.payment_method = "CARD";
    payment_request.description = "Demo payment for refund";
    
    jasau payment_response: PaymentResponse = acquiring_system.payment_ishke_engizu(payment_request);
    
    eger (!payment_response.success) {
        print("❌ Initial payment failed, cannot proceed with refund demo");
        qaytar jin;
    }
    
    print("✅ Initial payment successful: " + payment_response.payment_id);
    print("");
    
    // Now process refund
    jasau refund_amount: Decimal128 = decimal128_from_string("500.00");
    
    print("🔄 Processing refund...");
    print("   Original Payment ID: " + payment_response.payment_id);
    print("   Refund Amount: " + refund_amount + " KZT");
    
    jasau refund_request: RefundRequest = refund_request_create();
    refund_request.original_payment_id = payment_response.payment_id;
    refund_request.merchant_id = merchant_id;
    refund_request.amount = refund_amount;
    refund_request.reason = "Demo refund";
    
    jasau refund_response: RefundResponse = acquiring_system.refund_ishke_engizu(refund_request);
    
    eger (refund_response.success) {
        print("✅ Refund successful!");
        print("🆔 Refund ID: " + refund_response.refund_id);
        print("💰 Refund Amount: " + refund_response.amount + " KZT");
        print("📅 Timestamp: " + refund_response.timestamp);
    } else {
        print("❌ Refund failed!");
        print("💬 Error: " + refund_response.message);
    }
    
    print("");
    print("📊 Refund demo completed!");
    qaytar aqıqat;
}

// Demo partial refund
atqar partial_refund_demo() -> aqıqat {
    print("🚀 Starting Partial Refund Demo");
    print("=================================");
    
    jasau acquiring_system: AcquiringSystem = acquiring_system_create();
    acquiring_system.initialize();
    
    // Process initial payment
    jasau merchant_id: san = 2001;
    jasau customer_id: san = 3001;
    jasau payment_amount: Decimal128 = decimal128_from_string("3000.00");
    
    print("💳 Processing initial payment...");
    
    jasau payment_request: PaymentRequest = payment_request_create();
    payment_request.merchant_id = merchant_id;
    payment_request.customer_id = customer_id;
    payment_request.amount = payment_amount;
    payment_request.currency = "KZT";
    payment_request.payment_method = "CARD";
    payment_request.description = "Demo payment for partial refund";
    
    jasau payment_response: PaymentResponse = acquiring_system.payment_ishke_engizu(payment_request);
    
    eger (!payment_response.success) {
        print("❌ Initial payment failed, cannot proceed with partial refund demo");
        qaytar jin;
    }
    
    print("✅ Initial payment successful: " + payment_response.payment_id);
    print("");
    
    // Process partial refunds
    jasau refund_amounts: Array<Decimal128> = array_create();
    array_append(refund_amounts, decimal128_from_string("500.00"));  // First partial refund
    array_append(refund_amounts, decimal128_from_string("1000.00")); // Second partial refund
    
    jasau total_refunded: Decimal128 = decimal128_zero();
    
    eger (i = 0; i < array_length(refund_amounts); i++) {
        jasau refund_amount: Decimal128 = refund_amounts[i];
        
        print("🔄 Processing partial refund " + (i + 1) + ": " + refund_amount + " KZT");
        
        jasau refund_request: RefundRequest = refund_request_create();
        refund_request.original_payment_id = payment_response.payment_id;
        refund_request.merchant_id = merchant_id;
        refund_request.amount = refund_amount;
        refund_request.reason = "Demo partial refund " + (i + 1);
        
        jasau refund_response: RefundResponse = acquiring_system.refund_ishke_engizu(refund_request);
        
        eger (refund_response.success) {
            total_refunded = decimal128_add(total_refunded, refund_amount);
            print("   ✅ Success: " + refund_response.refund_id);
        } else {
            print("   ❌ Failed: " + refund_response.message);
        }
        
        print("");
    }
    
    print("📊 Partial Refund Demo Results:");
    print("   Original Payment: " + payment_amount + " KZT");
    print("   Total Refunded: " + total_refunded + " KZT");
    print("   Remaining Balance: " + decimal128_subtract(payment_amount, total_refunded) + " KZT");
    
    qaytar aqıqat;
}

// Main demo function
atqar main() -> san {
    print("🎯 Shanraq.org Acquiring Demo");
    print("==============================");
    print("");
    
    // Run acquiring demo
    acquiring_demo();
    print("");
    
    // Run payment methods demo
    payment_methods_demo();
    print("");
    
    // Run refund demo
    refund_demo();
    print("");
    
    // Run partial refund demo
    partial_refund_demo();
    print("");
    
    print("🎉 All Acquiring demos completed successfully!");
    qaytar 0;
}
