// Double-Entry Accounting System
// Қос-жолды есеп жүйесі
// Immutable ledger with two-phase commit transactions

// Account types
enum AccountType {
    ASSET,      // Актив (қаржылық активтер)
    LIABILITY,  // Міндеттеме (қарыздар)
    EQUITY,     // Капитал (меншік капиталы)
    REVENUE,    // Кіріс (табыс)
    EXPENSE     // Шығын (шығындар)
}

// Transaction entry
struct LedgerEntry {
    account_id: san;
    account_type: AccountType;
    debit_amount: Decimal128;
    credit_amount: Decimal128;
    description: jol;
    timestamp: san;
    transaction_id: jol;
    reference: jol;
}

// Transaction record
struct Transaction {
    id: jol;
    timestamp: san;
    description: jol;
    entries: Array<LedgerEntry>;
    status: TransactionStatus;
    reference: jol;
    metadata: JsonObject;
}

// Transaction status
enum TransactionStatus {
    PENDING,    // Күтуде
    COMMITTED,   // Расталған
    ROLLED_BACK, // Кері қайтарылған
    FAILED       // Сәтсіз
}

// Account balance
struct AccountBalance {
    account_id: san;
    account_type: AccountType;
    debit_balance: Decimal128;
    credit_balance: Decimal128;
    net_balance: Decimal128;
    last_updated: san;
}

// Double-entry ledger implementation
class DoubleEntryLedger {
    private accounts: Map<san, AccountBalance>;
    private transactions: Map<jol, Transaction>;
    private audit_log: Array<LedgerEntry>;
    
    // Initialize ledger
    atqar initialize() -> aqıqat {
        jasau accounts: Map<san, AccountBalance> = map_create();
        jasau transactions: Map<jol, Transaction> = map_create();
        jasau audit_log: Array<LedgerEntry> = array_create();
        
        this.accounts = accounts;
        this.transactions = transactions;
        this.audit_log = audit_log;
        
        qaytar aqıqat;
    }
    
    // Create account
    atqar account_jasau(account_id: san, account_type: AccountType, initial_balance: Decimal128) -> aqıqat {
        eger (map_contains(this.accounts, account_id)) {
            qaytar jin; // Account already exists
        }
        
        jasau balance: AccountBalance = account_balance_create();
        balance.account_id = account_id;
        balance.account_type = account_type;
        balance.debit_balance = initial_balance;
        balance.credit_balance = decimal128_zero();
        balance.net_balance = initial_balance;
        balance.last_updated = get_current_timestamp();
        
        map_set(this.accounts, account_id, balance);
        qaytar aqıqat;
    }
    
    // Validate transaction (double-entry rule)
    atqar transaction_tekseru(entries: Array<LedgerEntry>) -> aqıqat {
        jasau total_debits: Decimal128 = decimal128_zero();
        jasau total_credits: Decimal128 = decimal128_zero();
        
        eger (i = 0; i < array_length(entries); i++) {
            jasau entry: LedgerEntry = entries[i];
            total_debits = decimal128_add(total_debits, entry.debit_amount);
            total_credits = decimal128_add(total_credits, entry.credit_amount);
        }
        
        // Double-entry rule: total debits must equal total credits
        qaytar decimal128_equal(total_debits, total_credits);
    }
    
    // Process transaction with two-phase commit
    atqar transaction_ishke_engizu(transaction: Transaction) -> TransactionStatus {
        // Phase 1: Validate transaction
        eger (!transaction_tekseru(transaction.entries)) {
            transaction.status = FAILED;
            qaytar FAILED;
        }
        
        // Phase 2: Commit transaction
        transaction.status = COMMITTED;
        transaction.timestamp = get_current_timestamp();
        
        // Update account balances
        eger (i = 0; i < array_length(transaction.entries); i++) {
            jasau entry: LedgerEntry = transaction.entries[i];
            
            // Update account balance
            eger (map_contains(this.accounts, entry.account_id)) {
                jasau balance: AccountBalance = map_get(this.accounts, entry.account_id);
                
                // Update debit balance
                eger (decimal128_greater_than(entry.debit_amount, decimal128_zero())) {
                    balance.debit_balance = decimal128_add(balance.debit_balance, entry.debit_amount);
                }
                
                // Update credit balance
                eger (decimal128_greater_than(entry.credit_amount, decimal128_zero())) {
                    balance.credit_balance = decimal128_add(balance.credit_balance, entry.credit_amount);
                }
                
                // Calculate net balance
                balance.net_balance = decimal128_subtract(balance.debit_balance, balance.credit_balance);
                balance.last_updated = get_current_timestamp();
                
                map_set(this.accounts, entry.account_id, balance);
            }
            
            // Add to audit log
            array_append(this.audit_log, entry);
        }
        
        // Store transaction
        map_set(this.transactions, transaction.id, transaction);
        
        qaytar COMMITTED;
    }
    
    // Rollback transaction
    atqar transaction_kaytar(transaction_id: jol) -> aqıqat {
        eger (!map_contains(this.transactions, transaction_id)) {
            qaytar jin;
        }
        
        jasau transaction: Transaction = map_get(this.transactions, transaction_id);
        
        eger (transaction.status != COMMITTED) {
            qaytar jin;
        }
        
        // Reverse all entries
        eger (i = 0; i < array_length(transaction.entries); i++) {
            jasau entry: LedgerEntry = transaction.entries[i];
            
            // Create reverse entry
            jasau reverse_entry: LedgerEntry = ledger_entry_create();
            reverse_entry.account_id = entry.account_id;
            reverse_entry.account_type = entry.account_type;
            reverse_entry.debit_amount = entry.credit_amount;  // Swap debit/credit
            reverse_entry.credit_amount = entry.debit_amount;  // Swap debit/credit
            reverse_entry.description = "ROLLBACK: " + entry.description;
            reverse_entry.timestamp = get_current_timestamp();
            reverse_entry.transaction_id = transaction_id + "_ROLLBACK";
            reverse_entry.reference = entry.reference;
            
            // Update account balance
            eger (map_contains(this.accounts, entry.account_id)) {
                jasau balance: AccountBalance = map_get(this.accounts, entry.account_id);
                
                // Reverse debit balance
                eger (decimal128_greater_than(entry.debit_amount, decimal128_zero())) {
                    balance.debit_balance = decimal128_subtract(balance.debit_balance, entry.debit_amount);
                }
                
                // Reverse credit balance
                eger (decimal128_greater_than(entry.credit_amount, decimal128_zero())) {
                    balance.credit_balance = decimal128_subtract(balance.credit_balance, entry.credit_amount);
                }
                
                // Recalculate net balance
                balance.net_balance = decimal128_subtract(balance.debit_balance, balance.credit_balance);
                balance.last_updated = get_current_timestamp();
                
                map_set(this.accounts, entry.account_id, balance);
            }
            
            // Add reverse entry to audit log
            array_append(this.audit_log, reverse_entry);
        }
        
        // Update transaction status
        transaction.status = ROLLED_BACK;
        map_set(this.transactions, transaction_id, transaction);
        
        qaytar aqıqat;
    }
    
    // Get account balance
    atqar account_balans_al(account_id: san) -> AccountBalance {
        eger (map_contains(this.accounts, account_id)) {
            qaytar map_get(this.accounts, account_id);
        }
        
        qaytar NULL;
    }
    
    // Get transaction history
    atqar transaction_tarih_al(account_id: san, start_date: san, end_date: san) -> Array<LedgerEntry> {
        jasau history: Array<LedgerEntry> = array_create();
        
        eger (i = 0; i < array_length(this.audit_log); i++) {
            jasau entry: LedgerEntry = this.audit_log[i];
            
            eger (entry.account_id == account_id && 
                  entry.timestamp >= start_date && 
                  entry.timestamp <= end_date) {
                array_append(history, entry);
            }
        }
        
        qaytar history;
    }
    
    // Generate trial balance
    atqar trial_balans_al() -> Array<AccountBalance> {
        jasau trial_balance: Array<AccountBalance> = array_create();
        
        jasau account_ids: Array<san> = map_get_keys(this.accounts);
        eger (i = 0; i < array_length(account_ids); i++) {
            jasau account_id: san = account_ids[i];
            jasau balance: AccountBalance = map_get(this.accounts, account_id);
            array_append(trial_balance, balance);
        }
        
        qaytar trial_balance;
    }
    
    // Validate ledger integrity
    atqar ledger_tekseru() -> aqıqat {
        jasau total_debits: Decimal128 = decimal128_zero();
        jasau total_credits: Decimal128 = decimal128_zero();
        
        jasau account_ids: Array<san> = map_get_keys(this.accounts);
        eger (i = 0; i < array_length(account_ids); i++) {
            jasau account_id: san = account_ids[i];
            jasau balance: AccountBalance = map_get(this.accounts, account_id);
            
            total_debits = decimal128_add(total_debits, balance.debit_balance);
            total_credits = decimal128_add(total_credits, balance.credit_balance);
        }
        
        // Ledger integrity: total debits must equal total credits
        qaytar decimal128_equal(total_debits, total_credits);
    }
}

// Financial transaction types
enum FinancialTransactionType {
    TRANSFER,           // Аударым
    PAYMENT,           // Төлем
    DEPOSIT,           // Депозит
    WITHDRAWAL,        // Ақша алу
    INTEREST,          // Пайыз
    FEE,               // Комиссия
    REFUND,            // Қайтарым
    ADJUSTMENT         // Түзету
}

// Create financial transaction
atqar financial_transaction_jasau(
    type: FinancialTransactionType,
    from_account: san,
    to_account: san,
    amount: Decimal128,
    description: jol,
    reference: jol
) -> Transaction {
    jasau transaction: Transaction = transaction_create();
    transaction.id = generate_transaction_id();
    transaction.timestamp = get_current_timestamp();
    transaction.description = description;
    transaction.reference = reference;
    transaction.status = PENDING;
    
    // Create ledger entries based on transaction type
    jasau entries: Array<LedgerEntry> = array_create();
    
    eger (type == TRANSFER || type == PAYMENT) {
        // Debit destination account, credit source account
        jasau debit_entry: LedgerEntry = ledger_entry_create();
        debit_entry.account_id = to_account;
        debit_entry.debit_amount = amount;
        debit_entry.credit_amount = decimal128_zero();
        debit_entry.description = description;
        debit_entry.transaction_id = transaction.id;
        debit_entry.reference = reference;
        array_append(entries, debit_entry);
        
        jasau credit_entry: LedgerEntry = ledger_entry_create();
        credit_entry.account_id = from_account;
        credit_entry.debit_amount = decimal128_zero();
        credit_entry.credit_amount = amount;
        credit_entry.description = description;
        credit_entry.transaction_id = transaction.id;
        credit_entry.reference = reference;
        array_append(entries, credit_entry);
    }
    
    transaction.entries = entries;
    qaytar transaction;
}

// Process P2P transfer
atqar p2p_transfer_ishke_engizu(
    from_account: san,
    to_account: san,
    amount: Decimal128,
    description: jol
) -> TransactionStatus {
    jasau transaction: Transaction = financial_transaction_jasau(
        TRANSFER,
        from_account,
        to_account,
        amount,
        description,
        "P2P_TRANSFER"
    );
    
    jasau ledger: DoubleEntryLedger = double_entry_ledger_create();
    qaytar ledger.transaction_ishke_engizu(transaction);
}

// Process payment
atqar payment_ishke_engizu(
    from_account: san,
    to_account: san,
    amount: Decimal128,
    description: jol
) -> TransactionStatus {
    jasau transaction: Transaction = financial_transaction_jasau(
        PAYMENT,
        from_account,
        to_account,
        amount,
        description,
        "PAYMENT"
    );
    
    jasau ledger: DoubleEntryLedger = double_entry_ledger_create();
    qaytar ledger.transaction_ishke_engizu(transaction);
}
