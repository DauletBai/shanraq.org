// p2p_transfers.tng - Peer-to-Peer Transfer API
// Secure P2P transfer system with comprehensive validation and fraud detection

// P2P transfer structure
atqar p2p_transfer_jasau(from_user_id: jol, to_user_id: jol, amount: Decimal128, currency: jol, description: jol) -> P2PTransfer {
    jasau transfer: P2PTransfer = p2p_transfer_create();
    
    transfer.transfer_id = uuid_generate();
    transfer.from_user_id = from_user_id;
    transfer.to_user_id = to_user_id;
    transfer.amount = amount;
    transfer.currency = currency;
    transfer.description = description;
    transfer.status = "pending";
    transfer.created_at = current_timestamp();
    transfer.updated_at = current_timestamp();
    
    // Validate transfer parameters
    jasau validation_result: aqıqat = p2p_transfer_validate(transfer);
    
    eгер (!validation_result) {
        korset("❌ P2P transfer validation failed");
        qaytar NULL;
    }
    
    // Check idempotency
    jasau idempotency_result: aqıqat = p2p_transfer_idempotency_jasau(transfer.transfer_id, from_user_id, transfer_to_json(transfer));
    
    eгер (!idempotency_result) {
        korset("❌ P2P transfer idempotency check failed");
        qaytar NULL;
    }
    
    // Store transfer
    jasau stored: aqıqat = p2p_transfer_store(transfer);
    
    eгер (!stored) {
        korset("❌ Failed to store P2P transfer");
        qaytar NULL;
    }
    
    qaytar transfer;
}

// P2P transfer validation
atqar p2p_transfer_validate(transfer: P2PTransfer) -> aqıqat {
    // Validate users exist
    jasau from_user: JsonObject = user_get_by_id(transfer.from_user_id);
    jasau to_user: JsonObject = user_get_by_id(transfer.to_user_id);
    
    eгер (from_user == NULL) {
        korset("❌ From user not found: " + transfer.from_user_id);
        qaytar jin;
    }
    
    eгер (to_user == NULL) {
        korset("❌ To user not found: " + transfer.to_user_id);
        qaytar jin;
    }
    
    // Validate amount
    eгер (decimal128_is_negative(transfer.amount) || decimal128_is_zero(transfer.amount)) {
        korset("❌ Transfer amount must be positive");
        qaytar jin;
    }
    
    // Check daily transfer limits
    jasau daily_limit: Decimal128 = p2p_get_daily_transfer_limit(transfer.from_user_id);
    jasau daily_used: Decimal128 = p2p_get_daily_transfer_used(transfer.from_user_id);
    jasau daily_remaining: Decimal128 = decimal128_azaytu(daily_limit, daily_used);
    
    eгер (decimal128_ulken(transfer.amount, daily_remaining)) {
        korset("❌ Transfer amount exceeds daily limit");
        qaytar jin;
    }
    
    // Check account balance
    jasau from_account: Account = double_entry_get_user_account(transfer.from_user_id, transfer.currency);
    
    eгер (from_account == NULL) {
        korset("❌ From account not found for currency: " + transfer.currency);
        qaytar jin;
    }
    
    jasau account_balance: Decimal128 = account_balance_hesaplau(from_account.account_id);
    
    eгер (decimal128_ulken(transfer.amount, account_balance)) {
        korset("❌ Insufficient account balance");
        qaytar jin;
    }
    
    // Check user status
    jasau from_user_status: jol = json_object_get_string(from_user, "status");
    jasau to_user_status: jol = json_object_get_string(to_user, "status");
    
    eгер (from_user_status != "active") {
        korset("❌ From user account is not active");
        qaytar jin;
    }
    
    eгер (to_user_status != "active") {
        korset("❌ To user account is not active");
        qaytar jin;
    }
    
    qaytar jan;
}

// P2P transfer execution
atqar p2p_transfer_execute(transfer_id: jol) -> aqıqat {
    // Get transfer
    jasau transfer: P2PTransfer = p2p_get_transfer_by_id(transfer_id);
    
    eгер (transfer == NULL) {
        korset("❌ P2P transfer not found: " + transfer_id);
        qaytar jin;
    }
    
    // Check transfer status
    eгер (transfer.status != "pending") {
        korset("❌ Transfer is not in pending status");
        qaytar jin;
    }
    
    // Update status to processing
    transfer.status = "processing";
    transfer.updated_at = current_timestamp();
    p2p_transfer_store(transfer);
    
    // Create journal entries for double-entry bookkeeping
    jasau journal_entries: JournalEntry[] = p2p_create_journal_entries(transfer);
    
    // Execute two-phase commit
    jasau commit_result: aqıqat = two_phase_commit_jasau(transfer_id, journal_entries);
    
    eгер (!commit_result) {
        // Rollback transfer
        transfer.status = "failed";
        transfer.failed_at = current_timestamp();
        transfer.failure_reason = "Two-phase commit failed";
        p2p_transfer_store(transfer);
        
        // Log failure event
        audit_log_financial_transaction(
            transfer_id,
            transfer.from_user_id,
            transfer.amount,
            transfer.currency,
            "p2p_transfer_failed",
            json_object_create()
        );
        
        qaytar jin;
    }
    
    // Update transfer status
    transfer.status = "completed";
    transfer.completed_at = current_timestamp();
    transfer.updated_at = current_timestamp();
    p2p_transfer_store(transfer);
    
    // Log success event
    audit_log_financial_transaction(
        transfer_id,
        transfer.from_user_id,
        transfer.amount,
        transfer.currency,
        "p2p_transfer_completed",
        json_object_create()
    );
    
    // Send notifications
    p2p_send_notifications(transfer);
    
    qaytar jan;
}

// Create journal entries for P2P transfer
atqar p2p_create_journal_entries(transfer: P2PTransfer) -> JournalEntry[] {
    jasau entries: JournalEntry[] = [];
    
    // Get accounts
    jasau from_account: Account = double_entry_get_user_account(transfer.from_user_id, transfer.currency);
    jasau to_account: Account = double_entry_get_user_account(transfer.to_user_id, transfer.currency);
    
    // Create debit entry (from account)
    jasau debit_entry: JournalEntryLine = journal_entry_line_create();
    debit_entry.account_id = from_account.account_id;
    debit_entry.side = "debit";
    debit_entry.amount = transfer.amount;
    debit_entry.description = "P2P transfer to " + transfer.to_user_id;
    
    // Create credit entry (to account)
    jasau credit_entry: JournalEntryLine = journal_entry_line_create();
    credit_entry.account_id = to_account.account_id;
    credit_entry.side = "credit";
    credit_entry.amount = transfer.amount;
    credit_entry.description = "P2P transfer from " + transfer.from_user_id;
    
    // Create journal entry
    jasau journal: JournalEntry = journal_entry_jasau(
        transfer.transfer_id,
        "P2P Transfer: " + transfer.description,
        [debit_entry, credit_entry]
    );
    
    entries = entries + [journal];
    
    qaytar entries;
}

// P2P transfer rollback
atqar p2p_transfer_rollback(transfer_id: jol, rollback_reason: jol) -> aqıqat {
    // Get transfer
    jasau transfer: P2PTransfer = p2p_get_transfer_by_id(transfer_id);
    
    eгер (transfer == NULL) {
        korset("❌ P2P transfer not found: " + transfer_id);
        qaytar jin;
    }
    
    // Check if transfer can be rolled back
    eгер (transfer.status != "completed") {
        korset("❌ Only completed transfers can be rolled back");
        qaytar jin;
    }
    
    // Use event sourcing for rollback
    jasau rollback_result: aqıqat = transaction_rollback_event_sourcing(transfer_id, rollback_reason);
    
    eгер (!rollback_result) {
        korset("❌ Failed to rollback P2P transfer");
        qaytar jin;
    }
    
    // Update transfer status
    transfer.status = "rolled_back";
    transfer.rolled_back_at = current_timestamp();
    transfer.rollback_reason = rollback_reason;
    transfer.updated_at = current_timestamp();
    p2p_transfer_store(transfer);
    
    // Log rollback event
    audit_log_financial_transaction(
        transfer_id,
        get_current_user_id(),
        transfer.amount,
        transfer.currency,
        "p2p_transfer_rolled_back",
        json_object_create()
    );
    
    qaytar jan;
}

// P2P transfer status check
atqar p2p_transfer_status_tekseru(transfer_id: jol) -> JsonObject {
    jasau transfer: P2PTransfer = p2p_get_transfer_by_id(transfer_id);
    
    eгер (transfer == NULL) {
        korset("❌ P2P transfer not found: " + transfer_id);
        qaytar NULL;
    }
    
    jasau status: JsonObject = json_object_create();
    json_object_set_string(status, "transfer_id", transfer.transfer_id);
    json_object_set_string(status, "status", transfer.status);
    json_object_set_string(status, "from_user_id", transfer.from_user_id);
    json_object_set_string(status, "to_user_id", transfer.to_user_id);
    json_object_set_string(status, "amount", decimal128_to_string(transfer.amount));
    json_object_set_string(status, "currency", transfer.currency);
    json_object_set_string(status, "description", transfer.description);
    json_object_set_number(status, "created_at", transfer.created_at);
    json_object_set_number(status, "updated_at", transfer.updated_at);
    
    eгер (transfer.completed_at > 0) {
        json_object_set_number(status, "completed_at", transfer.completed_at);
    }
    
    eгер (transfer.failed_at > 0) {
        json_object_set_number(status, "failed_at", transfer.failed_at);
        json_object_set_string(status, "failure_reason", transfer.failure_reason);
    }
    
    eгер (transfer.rolled_back_at > 0) {
        json_object_set_number(status, "rolled_back_at", transfer.rolled_back_at);
        json_object_set_string(status, "rollback_reason", transfer.rollback_reason);
    }
    
    qaytar status;
}

// P2P transfer history
atqar p2p_transfer_history_alu(user_id: jol, start_date: san, end_date: san, limit: san, offset: san) -> JsonObject {
    jasau transfers: P2PTransfer[] = p2p_get_user_transfers(user_id, start_date, end_date, limit, offset);
    
    jasau history: JsonObject = json_object_create();
    json_object_set_string(history, "user_id", user_id);
    json_object_set_number(history, "start_date", start_date);
    json_object_set_number(history, "end_date", end_date);
    json_object_set_number(history, "limit", limit);
    json_object_set_number(history, "offset", offset);
    
    jasau transfer_list: JsonObject[] = [];
    
    jasau i: san = 0;
    azirshe (i < transfers.length) {
        jasau transfer: P2PTransfer = transfers[i];
        
        jasau transfer_info: JsonObject = json_object_create();
        json_object_set_string(transfer_info, "transfer_id", transfer.transfer_id);
        json_object_set_string(transfer_info, "from_user_id", transfer.from_user_id);
        json_object_set_string(transfer_info, "to_user_id", transfer.to_user_id);
        json_object_set_string(transfer_info, "amount", decimal128_to_string(transfer.amount));
        json_object_set_string(transfer_info, "currency", transfer.currency);
        json_object_set_string(transfer_info, "description", transfer.description);
        json_object_set_string(transfer_info, "status", transfer.status);
        json_object_set_number(transfer_info, "created_at", transfer.created_at);
        
        transfer_list = transfer_list + [transfer_info];
        
        i = i + 1;
    }
    
    json_object_set_array(history, "transfers", transfer_list);
    json_object_set_number(history, "total_count", transfer_list.length);
    
    qaytar history;
}

// P2P transfer limits
atqar p2p_transfer_limits_jasau(user_id: jol) -> JsonObject {
    jasau limits: JsonObject = json_object_create();
    
    // Daily limits
    jasau daily_limit: Decimal128 = p2p_get_daily_transfer_limit(user_id);
    jasau daily_used: Decimal128 = p2p_get_daily_transfer_used(user_id);
    jasau daily_remaining: Decimal128 = decimal128_azaytu(daily_limit, daily_used);
    
    json_object_set_string(limits, "daily_limit", decimal128_to_string(daily_limit));
    json_object_set_string(limits, "daily_used", decimal128_to_string(daily_used));
    json_object_set_string(limits, "daily_remaining", decimal128_to_string(daily_remaining));
    
    // Monthly limits
    jasau monthly_limit: Decimal128 = p2p_get_monthly_transfer_limit(user_id);
    jasau monthly_used: Decimal128 = p2p_get_monthly_transfer_used(user_id);
    jasau monthly_remaining: Decimal128 = decimal128_azaytu(monthly_limit, monthly_used);
    
    json_object_set_string(limits, "monthly_limit", decimal128_to_string(monthly_limit));
    json_object_set_string(limits, "monthly_used", decimal128_to_string(monthly_used));
    json_object_set_string(limits, "monthly_remaining", decimal128_to_string(monthly_remaining));
    
    // Transaction limits
    jasau max_single_transfer: Decimal128 = p2p_get_max_single_transfer(user_id);
    jasau min_single_transfer: Decimal128 = p2p_get_min_single_transfer(user_id);
    
    json_object_set_string(limits, "max_single_transfer", decimal128_to_string(max_single_transfer));
    json_object_set_string(limits, "min_single_transfer", decimal128_to_string(min_single_transfer));
    
    qaytar limits;
}

// P2P transfer fraud detection
atqar p2p_fraud_detection_jasau(transfer: P2PTransfer) -> aqıqat {
    jasau risk_score: san = 0;
    jasau risk_factors: jol[] = [];
    
    // Check transfer amount against user history
    jasau avg_transfer: Decimal128 = p2p_get_user_average_transfer(transfer.from_user_id);
    jasau amount_ratio: Decimal128 = decimal128_bolu(transfer.amount, avg_transfer, 2);
    
    eгер (decimal128_ulken(amount_ratio, decimal128_jasau("5", 1, 0))) {
        risk_score = risk_score + 30;
        risk_factors = risk_factors + ["High amount compared to history"];
    }
    
    // Check transfer frequency
    jasau recent_transfers: san = p2p_get_user_recent_transfers_count(transfer.from_user_id, 3600); // Last hour
    
    eгер (recent_transfers > 10) {
        risk_score = risk_score + 25;
        risk_factors = risk_factors + ["High transfer frequency"];
    }
    
    // Check time of day (unusual hours)
    jasau current_hour: san = get_current_hour();
    
    eгер (current_hour < 6 || current_hour > 22) {
        risk_score = risk_score + 15;
        risk_factors = risk_factors + ["Unusual time of day"];
    }
    
    // Check recipient history
    jasau recipient_risk: san = p2p_get_recipient_risk_score(transfer.to_user_id);
    risk_score = risk_score + recipient_risk;
    
    eгер (recipient_risk > 0) {
        risk_factors = risk_factors + ["High-risk recipient"];
    }
    
    // Check for suspicious patterns
    jasau suspicious_patterns: aqıqat = p2p_detect_suspicious_patterns(transfer);
    
    eгер (suspicious_patterns) {
        risk_score = risk_score + 40;
        risk_factors = risk_factors + ["Suspicious transfer pattern"];
    }
    
    // Determine if transfer should be blocked
    jasau should_block: aqıqat = risk_score >= 70;
    
    eгер (should_block) {
        // Log fraud detection
        jasau fraud_details: JsonObject = json_object_create();
        json_object_set_string(fraud_details, "transfer_id", transfer.transfer_id);
        json_object_set_number(fraud_details, "risk_score", risk_score);
        json_object_set_array(fraud_details, "risk_factors", risk_factors);
        
        audit_log_security_event(
            "fraud_detected",
            transfer.from_user_id,
            "high",
            fraud_details
        );
        
        // Block transfer
        transfer.status = "blocked";
        transfer.blocked_at = current_timestamp();
        transfer.block_reason = "Fraud detection";
        p2p_transfer_store(transfer);
        
        qaytar jin;
    }
    
    qaytar jan;
}

// P2P transfer notifications
atqar p2p_send_notifications(transfer: P2PTransfer) -> aqıqat {
    // Send notification to sender
    jasau sender_notification: JsonObject = json_object_create();
    json_object_set_string(sender_notification, "type", "p2p_transfer_sent");
    json_object_set_string(sender_notification, "transfer_id", transfer.transfer_id);
    json_object_set_string(sender_notification, "to_user_id", transfer.to_user_id);
    json_object_set_string(sender_notification, "amount", decimal128_to_string(transfer.amount));
    json_object_set_string(sender_notification, "currency", transfer.currency);
    json_object_set_string(sender_notification, "status", transfer.status);
    
    notification_send(transfer.from_user_id, sender_notification);
    
    // Send notification to recipient
    jasau recipient_notification: JsonObject = json_object_create();
    json_object_set_string(recipient_notification, "type", "p2p_transfer_received");
    json_object_set_string(recipient_notification, "transfer_id", transfer.transfer_id);
    json_object_set_string(recipient_notification, "from_user_id", transfer.from_user_id);
    json_object_set_string(recipient_notification, "amount", decimal128_to_string(transfer.amount));
    json_object_set_string(recipient_notification, "currency", transfer.currency);
    json_object_set_string(recipient_notification, "status", transfer.status);
    
    notification_send(transfer.to_user_id, recipient_notification);
    
    qaytar jan;
}

// P2P transfer API endpoints
atqar p2p_transfer_api_jasau() -> JsonObject {
    jasau api: JsonObject = json_object_create();
    
    // POST /api/v1/p2p/transfer
    jasau create_transfer: JsonObject = json_object_create();
    json_object_set_string(create_transfer, "method", "POST");
    json_object_set_string(create_transfer, "path", "/api/v1/p2p/transfer");
    json_object_set_string(create_transfer, "description", "Create a new P2P transfer");
    json_object_set_string(create_transfer, "handler", "p2p_transfer_create_handler");
    
    // GET /api/v1/p2p/transfer/{transfer_id}
    jasau get_transfer: JsonObject = json_object_create();
    json_object_set_string(get_transfer, "method", "GET");
    json_object_set_string(get_transfer, "path", "/api/v1/p2p/transfer/{transfer_id}");
    json_object_set_string(get_transfer, "description", "Get P2P transfer status");
    json_object_set_string(get_transfer, "handler", "p2p_transfer_get_handler");
    
    // GET /api/v1/p2p/transfers
    jasau list_transfers: JsonObject = json_object_create();
    json_object_set_string(list_transfers, "method", "GET");
    json_object_set_string(list_transfers, "path", "/api/v1/p2p/transfers");
    json_object_set_string(list_transfers, "description", "List user P2P transfers");
    json_object_set_string(list_transfers, "handler", "p2p_transfer_list_handler");
    
    // POST /api/v1/p2p/transfer/{transfer_id}/rollback
    jasau rollback_transfer: JsonObject = json_object_create();
    json_object_set_string(rollback_transfer, "method", "POST");
    json_object_set_string(rollback_transfer, "path", "/api/v1/p2p/transfer/{transfer_id}/rollback");
    json_object_set_string(rollback_transfer, "description", "Rollback P2P transfer");
    json_object_set_string(rollback_transfer, "handler", "p2p_transfer_rollback_handler");
    
    // GET /api/v1/p2p/limits
    jasau get_limits: JsonObject = json_object_create();
    json_object_set_string(get_limits, "method", "GET");
    json_object_set_string(get_limits, "path", "/api/v1/p2p/limits");
    json_object_set_string(get_limits, "description", "Get P2P transfer limits");
    json_object_set_string(get_limits, "handler", "p2p_transfer_limits_handler");
    
    json_object_set_object(api, "create_transfer", create_transfer);
    json_object_set_object(api, "get_transfer", get_transfer);
    json_object_set_object(api, "list_transfers", list_transfers);
    json_object_set_object(api, "rollback_transfer", rollback_transfer);
    json_object_set_object(api, "get_limits", get_limits);
    
    qaytar api;
}
