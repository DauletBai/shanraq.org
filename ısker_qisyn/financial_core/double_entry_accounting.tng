// double_entry_accounting.tng - Double-Entry Accounting System
// Two-phase commit accounting for financial transactions

// Account structure for double-entry bookkeeping
atqar account_jasau(account_id: jol, account_type: jol, currency: jol, user_id: jol) -> Account {
    jasau account: Account = account_create();
    
    account.account_id = account_id;
    account.account_type = account_type; // "asset", "liability", "equity", "revenue", "expense"
    account.currency = currency;
    account.user_id = user_id;
    account.balance = decimal128_jasau("0", 18, 2);
    account.debit_balance = decimal128_jasau("0", 18, 2);
    account.credit_balance = decimal128_jasau("0", 18, 2);
    account.status = "active";
    account.created_at = current_timestamp();
    account.updated_at = current_timestamp();
    
    // Validate account type
    eгер (!double_entry_validate_account_type(account_type)) {
        korset("❌ Invalid account type: " + account_type);
        qaytar NULL;
    }
    
    // Store account
    jasau stored: aqıqat = double_entry_store_account(account);
    
    eгер (!stored) {
        korset("❌ Failed to store account");
        qaytar NULL;
    }
    
    qaytar account;
}

// Journal entry for double-entry bookkeeping
atqar journal_entry_jasau(transaction_id: jol, description: jol, entries: JournalEntry[]) -> JournalEntry {
    jasau journal: JournalEntry = journal_entry_create();
    
    journal.journal_id = uuid_generate();
    journal.transaction_id = transaction_id;
    journal.description = description;
    journal.entries = entries;
    journal.status = "pending";
    journal.created_at = current_timestamp();
    journal.updated_at = current_timestamp();
    
    // Validate journal entry (debits must equal credits)
    jasau validation_result: aqıqat = double_entry_validate_journal_entry(journal);
    
    eгер (!validation_result) {
        korset("❌ Journal entry validation failed - debits must equal credits");
        qaytar NULL;
    }
    
    // Store journal entry
    jasau stored: aqıqat = double_entry_store_journal_entry(journal);
    
    eгер (!stored) {
        korset("❌ Failed to store journal entry");
        qaytar NULL;
    }
    
    qaytar journal;
}

// Two-phase commit for transactions
atqar two_phase_commit_jasau(transaction_id: jol, journal_entries: JournalEntry[]) -> aqıqat {
    jasau transaction: Transaction = transaction_create();
    transaction.transaction_id = transaction_id;
    transaction.status = "preparing";
    transaction.created_at = current_timestamp();
    transaction.journal_entries = journal_entries;
    
    // Phase 1: Prepare
    jasau prepare_result: aqıqat = two_phase_commit_prepare(transaction);
    
    eгер (!prepare_result) {
        korset("❌ Two-phase commit prepare failed");
        two_phase_commit_rollback(transaction);
        qaytar jin;
    }
    
    // Phase 2: Commit
    jasau commit_result: aqıqat = two_phase_commit_commit(transaction);
    
    eгер (!commit_result) {
        korset("❌ Two-phase commit commit failed");
        two_phase_commit_rollback(transaction);
        qaytar jin;
    }
    
    // Update transaction status
    transaction.status = "committed";
    transaction.committed_at = current_timestamp();
    
    // Log successful transaction
    audit_log_financial_transaction(
        transaction_id,
        get_current_user_id(),
        double_entry_calculate_total_amount(journal_entries),
        "USD",
        "two_phase_commit",
        json_object_create()
    );
    
    qaytar jan;
}

// Two-phase commit prepare phase
atqar two_phase_commit_prepare(transaction: Transaction) -> aqıqat {
    // Lock all accounts involved in transaction
    jasau accounts: Account[] = double_entry_get_transaction_accounts(transaction);
    
    jasau i: san = 0;
    azirshe (i < accounts.length) {
        jasau account: Account = accounts[i];
        
        // Lock account for update
        jasau locked: aqıqat = double_entry_lock_account(account.account_id);
        
        eгер (!locked) {
            korset("❌ Failed to lock account: " + account.account_id);
            qaytar jin;
        }
        
        i = i + 1;
    }
    
    // Validate all journal entries
    jasau j: san = 0;
    azirshe (j < transaction.journal_entries.length) {
        jasau journal: JournalEntry = transaction.journal_entries[j];
        
        jasau validation: aqıqat = double_entry_validate_journal_entry(journal);
        
        eгер (!validation) {
            korset("❌ Journal entry validation failed");
            qaytar jin;
        }
        
        j = j + 1;
    }
    
    // Check account balances
    jasau k: san = 0;
    azirshe (k < accounts.length) {
        jasau account: Account = accounts[k];
        jasau projected_balance: Decimal128 = double_entry_calculate_projected_balance(account, transaction);
        
        // Check for negative balance (if not allowed)
        eгер (double_entry_negative_balance_not_allowed(account) && decimal128_is_negative(projected_balance)) {
            korset("❌ Negative balance not allowed for account: " + account.account_id);
            qaytar jin;
        }
        
        k = k + 1;
    }
    
    // Mark transaction as prepared
    transaction.status = "prepared";
    transaction.prepared_at = current_timestamp();
    
    qaytar jan;
}

// Two-phase commit commit phase
atqar two_phase_commit_commit(transaction: Transaction) -> aqıqat {
    // Apply all journal entries
    jasau i: san = 0;
    azirshe (i < transaction.journal_entries.length) {
        jasau journal: JournalEntry = transaction.journal_entries[i];
        
        jasau applied: aqıqat = double_entry_apply_journal_entry(journal);
        
        eгер (!applied) {
            korset("❌ Failed to apply journal entry: " + journal.journal_id);
            qaytar jin;
        }
        
        i = i + 1;
    }
    
    // Update account balances
    jasau accounts: Account[] = double_entry_get_transaction_accounts(transaction);
    
    jasau j: san = 0;
    azirshe (j < accounts.length) {
        jasau account: Account = accounts[j];
        
        jasau updated: aqıqat = double_entry_update_account_balance(account, transaction);
        
        eгер (!updated) {
            korset("❌ Failed to update account balance: " + account.account_id);
            qaytar jin;
        }
        
        j = j + 1;
    }
    
    // Mark journal entries as committed
    jasau k: san = 0;
    azirshe (k < transaction.journal_entries.length) {
        jasau journal: JournalEntry = transaction.journal_entries[k];
        journal.status = "committed";
        journal.committed_at = current_timestamp();
        
        jasau updated: aqıqat = double_entry_update_journal_entry(journal);
        
        eгер (!updated) {
            korset("❌ Failed to update journal entry status");
            qaytar jin;
        }
        
        k = k + 1;
    }
    
    qaytar jan;
}

// Two-phase commit rollback
atqar two_phase_commit_rollback(transaction: Transaction) -> aqıqat {
    // Unlock all accounts
    jasau accounts: Account[] = double_entry_get_transaction_accounts(transaction);
    
    jasau i: san = 0;
    azirshe (i < accounts.length) {
        jasau account: Account = accounts[i];
        double_entry_unlock_account(account.account_id);
        i = i + 1;
    }
    
    // Mark transaction as rolled back
    transaction.status = "rolled_back";
    transaction.rolled_back_at = current_timestamp();
    
    // Log rollback
    audit_log_financial_transaction(
        transaction.transaction_id,
        get_current_user_id(),
        decimal128_jasau("0", 18, 2),
        "USD",
        "rollback",
        json_object_create()
    );
    
    qaytar jan;
}

// Account balance calculation
atqar account_balance_hesaplau(account_id: jol) -> Decimal128 {
    jasau account: Account = double_entry_get_account_by_id(account_id);
    
    eгер (account == NULL) {
        korset("❌ Account not found: " + account_id);
        qaytar NULL;
    }
    
    // Calculate balance based on account type
    jasau balance: Decimal128 = NULL;
    
    eгер (account.account_type == "asset" || account.account_type == "expense") {
        // Assets and expenses: debit increases, credit decreases
        balance = decimal128_azaytu(account.debit_balance, account.credit_balance);
    } else {
        // Liabilities, equity, and revenue: credit increases, debit decreases
        balance = decimal128_azaytu(account.credit_balance, account.debit_balance);
    }
    
    qaytar balance;
}

// Account balance update
atqar account_balance_zhangartu(account_id: jol, debit_amount: Decimal128, credit_amount: Decimal128) -> aqıqat {
    jasau account: Account = double_entry_get_account_by_id(account_id);
    
    eгер (account == NULL) {
        korset("❌ Account not found: " + account_id);
        qaytar jin;
    }
    
    // Update debit balance
    eгер (!decimal128_is_zero(debit_amount)) {
        account.debit_balance = decimal128_qosu(account.debit_balance, debit_amount);
    }
    
    // Update credit balance
    eгер (!decimal128_is_zero(credit_amount)) {
        account.credit_balance = decimal128_qosu(account.credit_balance, credit_amount);
    }
    
    // Recalculate total balance
    account.balance = account_balance_hesaplau(account_id);
    account.updated_at = current_timestamp();
    
    // Store updated account
    jasau stored: aqıqat = double_entry_store_account(account);
    
    eгер (!stored) {
        korset("❌ Failed to store updated account");
        qaytar jin;
    }
    
    qaytar jan;
}

// Transaction validation
atqar transaction_validation_jasau(transaction_id: jol) -> aqıqat {
    jasau transaction: Transaction = double_entry_get_transaction_by_id(transaction_id);
    
    eгер (transaction == NULL) {
        korset("❌ Transaction not found: " + transaction_id);
        qaytar jin;
    }
    
    // Validate journal entries
    jasau i: san = 0;
    azirshe (i < transaction.journal_entries.length) {
        jasau journal: JournalEntry = transaction.journal_entries[i];
        
        // Check debits equal credits
        jasau total_debits: Decimal128 = decimal128_jasau("0", 18, 2);
        jasau total_credits: Decimal128 = decimal128_jasau("0", 18, 2);
        
        jasau j: san = 0;
        azirshe (j < journal.entries.length) {
            jasau entry: JournalEntryLine = journal.entries[j];
            
            eгер (entry.side == "debit") {
                total_debits = decimal128_qosu(total_debits, entry.amount);
            } else {
                total_credits = decimal128_qosu(total_credits, entry.amount);
            }
            
            j = j + 1;
        }
        
        // Validate debits equal credits
        jasau balanced: aqıqat = decimal128_teŋ(total_debits, total_credits);
        
        eгер (!balanced) {
            korset("❌ Journal entry not balanced: " + journal.journal_id);
            qaytar jin;
        }
        
        i = i + 1;
    }
    
    qaytar jan;
}

// Account reconciliation
atqar account_reconciliation_jasau(account_id: jol, as_of_date: san) -> ReconciliationReport {
    jasau report: ReconciliationReport = reconciliation_report_create();
    
    // Get account
    jasau account: Account = double_entry_get_account_by_id(account_id);
    
    eгер (account == NULL) {
        korset("❌ Account not found: " + account_id);
        qaytar NULL;
    }
    
    // Get all transactions for account up to as_of_date
    jasau transactions: Transaction[] = double_entry_get_account_transactions(account_id, as_of_date);
    
    // Calculate running balance
    jasau running_balance: Decimal128 = decimal128_jasau("0", 18, 2);
    
    jasau i: san = 0;
    azirshe (i < transactions.length) {
        jasau transaction: Transaction = transactions[i];
        
        // Calculate transaction impact on account
        jasau impact: Decimal128 = double_entry_calculate_transaction_impact(account_id, transaction);
        running_balance = decimal128_qosu(running_balance, impact);
        
        i = i + 1;
    }
    
    // Compare with account balance
    jasau account_balance: Decimal128 = account_balance_hesaplau(account_id);
    jasau reconciled: aqıqat = decimal128_teŋ(running_balance, account_balance);
    
    // Build report
    report.account_id = account_id;
    report.as_of_date = as_of_date;
    report.calculated_balance = running_balance;
    report.account_balance = account_balance;
    report.reconciled = reconciled;
    report.transaction_count = transactions.length;
    report.created_at = current_timestamp();
    
    qaytar report;
}

// Financial reporting
atqar financial_report_jasau(report_type: jol, start_date: san, end_date: san) -> FinancialReport {
    jasau report: FinancialReport = financial_report_create();
    
    report.report_type = report_type;
    report.start_date = start_date;
    report.end_date = end_date;
    report.created_at = current_timestamp();
    
    eгер (report_type == "balance_sheet") {
        report = double_entry_balance_sheet_jasau(start_date, end_date);
    } eгер (report_type == "income_statement") {
        report = double_entry_income_statement_jasau(start_date, end_date);
    } eгер (report_type == "cash_flow") {
        report = double_entry_cash_flow_jasau(start_date, end_date);
    } else {
        korset("❌ Unknown report type: " + report_type);
        qaytar NULL;
    }
    
    qaytar report;
}

// Balance sheet generation
atqar double_entry_balance_sheet_jasau(start_date: san, end_date: san) -> FinancialReport {
    jasau report: FinancialReport = financial_report_create();
    
    // Get all accounts
    jasau accounts: Account[] = double_entry_get_all_accounts();
    
    // Categorize accounts
    jasau assets: Account[] = [];
    jasau liabilities: Account[] = [];
    jasau equity: Account[] = [];
    
    jasau i: san = 0;
    azirshe (i < accounts.length) {
        jasau account: Account = accounts[i];
        
        eгер (account.account_type == "asset") {
            assets = assets + [account];
        } eгер (account.account_type == "liability") {
            liabilities = liabilities + [account];
        } eгер (account.account_type == "equity") {
            equity = equity + [account];
        }
        
        i = i + 1;
    }
    
    // Calculate totals
    jasau total_assets: Decimal128 = double_entry_calculate_account_group_total(assets);
    jasau total_liabilities: Decimal128 = double_entry_calculate_account_group_total(liabilities);
    jasau total_equity: Decimal128 = double_entry_calculate_account_group_total(equity);
    
    // Build report data
    jasau report_data: JsonObject = json_object_create();
    json_object_set_object(report_data, "assets", double_entry_account_group_to_json(assets));
    json_object_set_object(report_data, "liabilities", double_entry_account_group_to_json(liabilities));
    json_object_set_object(report_data, "equity", double_entry_account_group_to_json(equity));
    json_object_set_string(report_data, "total_assets", decimal128_to_string(total_assets));
    json_object_set_string(report_data, "total_liabilities", decimal128_to_string(total_liabilities));
    json_object_set_string(report_data, "total_equity", decimal128_to_string(total_equity));
    
    report.report_data = report_data;
    
    qaytar report;
}
