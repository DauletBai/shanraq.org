// template_filters.tng - Shanraq Template Filters
// Шанрак Үлгі Сүзгілері / Shanraq Template Filters

// Register template filters
atqar template_filters_qosu(engine: TemplateEngine) {
    // String filters
    json_object_set_function(engine.filters, "upper", template_filter_upper);
    json_object_set_function(engine.filters, "lower", template_filter_lower);
    json_object_set_function(engine.filters, "capitalize", template_filter_capitalize);
    json_object_set_function(engine.filters, "title", template_filter_title);
    json_object_set_function(engine.filters, "trim", template_filter_trim);
    json_object_set_function(engine.filters, "replace", template_filter_replace);
    
    // Number filters
    json_object_set_function(engine.filters, "round", template_filter_round);
    json_object_set_function(engine.filters, "ceil", template_filter_ceil);
    json_object_set_function(engine.filters, "floor", template_filter_floor);
    json_object_set_function(engine.filters, "abs", template_filter_abs);
    
    // Array filters
    json_object_set_function(engine.filters, "unique", template_filter_unique);
    json_object_set_function(engine.filters, "sort", template_filter_sort);
    json_object_set_function(engine.filters, "reverse", template_filter_reverse);
    json_object_set_function(engine.filters, "slice", template_filter_slice);
    
    // Date filters
    json_object_set_function(engine.filters, "date", template_filter_date);
    json_object_set_function(engine.filters, "time", template_filter_time);
    json_object_set_function(engine.filters, "datetime", template_filter_datetime);
    
    // Shanraq-specific filters
    json_object_set_function(engine.filters, "morpheme_analyze", template_filter_morpheme_analyze);
    json_object_set_function(engine.filters, "phoneme_optimize", template_filter_phoneme_optimize);
    json_object_set_function(engine.filters, "archetype_apply", template_filter_archetype_apply);
}

// String filters
atqar template_filter_upper(text: jol) -> jol {
    qaytar string_upper(text);
}

atqar template_filter_lower(text: jol) -> jol {
    qaytar string_lower(text);
}

atqar template_filter_capitalize(text: jol) -> jol {
    eгер (string_length(text) > 0) {
        jasau first: jol = string_upper(string_substring(text, 0, 1));
        jasau rest: jol = string_lower(string_substring(text, 1));
        qaytar first + rest;
    }
    qaytar text;
}

atqar template_filter_title(text: jol) -> jol {
    jasau words: jol[] = string_split(text, " ");
    jasau title_words: jol[] = [];
    san i = 0;
    while (i < array_uzyn_bolu(words)) {
        title_words = title_words + [template_filter_capitalize(words[i])];
        i = i + 1;
    }
    qaytar string_join(title_words, " ");
}

atqar template_filter_trim(text: jol) -> jol {
    qaytar string_trim(text);
}

atqar template_filter_replace(text: jol, search: jol, replace: jol) -> jol {
    qaytar string_replace(text, search, replace);
}

// Number filters
atqar template_filter_round(number: san, decimals: san) -> san {
    jasau factor: san = 1;
    san i = 0;
    while (i < decimals) {
        factor = factor * 10;
        i = i + 1;
    }
    qaytar (number * factor + 0.5) / factor;
}

atqar template_filter_ceil(number: san) -> san {
    qaytar number + 1; // Simplified
}

atqar template_filter_floor(number: san) -> san {
    qaytar number; // Simplified
}

atqar template_filter_abs(number: san) -> san {
    eгер (number < 0) {
        qaytar -number;
    }
    qaytar number;
}

// Array filters
atqar template_filter_unique(array: jol[]) -> jol[] {
    jasau unique: jol[] = [];
    san i = 0;
    while (i < array_uzyn_bolu(array)) {
        jasau item: jol = array[i];
        jasau found: aqıqat = aqıqat_ras;
        san j = 0;
        while (j < array_uzyn_bolu(unique)) {
            eгер (unique[j] == item) {
                found = aqıqat_ras;
                break;
            }
            j = j + 1;
        }
        eгер (found == aqıqat_ras) {
            unique = unique + [item];
        }
        i = i + 1;
    }
    qaytar unique;
}

atqar template_filter_sort(array: jol[]) -> jol[] {
    qaytar template_helper_sort(array);
}

atqar template_filter_reverse(array: jol[]) -> jol[] {
    qaytar template_helper_reverse(array);
}

atqar template_filter_slice(array: jol[], start: san, end: san) -> jol[] {
    qaytar array_slice(array, start, end);
}

// Date filters
atqar template_filter_date(timestamp: san, format: jol) -> jol {
    qaytar "2025-10-01"; // Placeholder
}

atqar template_filter_time(timestamp: san) -> jol {
    qaytar "10:27:59"; // Placeholder
}

atqar template_filter_datetime(timestamp: san) -> jol {
    qaytar "2025-10-01 10:27:59"; // Placeholder
}

// Shanraq-specific filters
atqar template_filter_morpheme_analyze(engine: TemplateEngine, word: jol) -> jol {
    qaytar morpheme_magynasyn_alu(engine.morpheme_engine, word);
}

atqar template_filter_phoneme_optimize(engine: TemplateEngine, text: jol) -> jol {
    qaytar phoneme_negizgi_optim_qoldanu(engine.phoneme_engine, text);
}

atqar template_filter_archetype_apply(engine: TemplateEngine, name: jol, config: JsonObject) -> JsonObject {
    qaytar archetype_negizgi_qoldanu(engine.archetype_engine, name, config);
}








