// jojj_interface.tng - Универсальный JOJJ интерфейс
// Universal JOJJ (Jasau, Oqu, Janartu, Joiu) Interface

// JOJJ интерфейс для всех сущностей
interface JOJJInterface {
    // Jasau - Создание
    jasau(entity: JsonObject) -> JsonObject;
    
    // Oqu - Чтение
    oqu(id: jol) -> JsonObject;
    oqu_barlik() -> JsonObject[];
    oqu_izdeu(criteria: JsonObject) -> JsonObject[];
    
    // Janartu - Обновление
    janartu(id: jol, entity: JsonObject) -> JsonObject;
    
    // Joiu - Удаление
    joiu(id: jol) -> aqıqat;
}

// Базовый JOJJ класс
class JOJJBase implements JOJJInterface {
    protected table_name: jol;
    protected connection: DatabaseConnection;
    
    constructor(table_name: jol, connection: DatabaseConnection) {
        this.table_name = table_name;
        this.connection = connection;
    }
    
    // Jasau - Создание записи
    atqar jasau(entity: JsonObject) -> JsonObject {
        // Генерируем ID если не указан
        eгер (!json_object_has(entity, "id")) {
            json_object_set_string(entity, "id", uuid_generate());
        }
        
        // Добавляем временные метки
        json_object_set_number(entity, "created_at", current_timestamp());
        json_object_set_number(entity, "updated_at", current_timestamp());
        
        // Строим SQL запрос
        jasau fields: jol[] = [];
        jasau values: jol[] = [];
        jasau placeholders: jol[] = [];
        
        jasau keys: jol[] = json_object_get_keys(entity);
        jasau i: san = 0;
        
        azirshe (i < keys.length) {
            jasau key: jol = keys[i];
            jasau value: jol = json_object_get_string(entity, key);
            
            eгер (value != "") {
                fields = fields + [key];
                values = values + [value];
                placeholders = placeholders + ["?"];
            }
            
            i = i + 1;
        }
        
        jasau sql: jol = "INSERT INTO " + this.table_name + " (" + 
            string_join(fields, ", ") + ") VALUES (" + 
            string_join(placeholders, ", ") + ")";
        
        jasau result: QueryResult = database_query_ishke_engizu(this.connection, sql, values);
        
        eгер (result.success) {
            jasau response: JsonObject = json_object_create();
            json_object_set_boolean(response, "success", jan);
            json_object_set_object(response, "entity", entity);
            json_object_set_string(response, "message", "Entity created successfully");
            qaytar response;
        } aitpese {
            jasau error: JsonObject = json_object_create();
            json_object_set_boolean(error, "success", jin);
            json_object_set_string(error, "error", "Failed to create entity");
            qaytar error;
        }
    }
    
    // Oqu - Чтение записи по ID
    atqar oqu(id: jol) -> JsonObject {
        jasau sql: jol = "SELECT * FROM " + this.table_name + " WHERE id = ?";
        jasau result: QueryResult = database_query_ishke_engizu(this.connection, sql, [id]);
        
        eгер (result.success && result.rows.length > 0) {
            qaytar result.rows[0];
        }
        
        qaytar NULL;
    }
    
    // Oqu - Чтение всех записей
    atqar oqu_barlik() -> JsonObject[] {
        jasau sql: jol = "SELECT * FROM " + this.table_name + " ORDER BY created_at DESC";
        jasau result: QueryResult = database_query_ishke_engizu(this.connection, sql);
        
        eгер (result.success) {
            qaytar result.rows;
        }
        
        qaytar [];
    }
    
    // Oqu - Поиск записей по критериям
    atqar oqu_izdeu(criteria: JsonObject) -> JsonObject[] {
        jasau sql: jol = "SELECT * FROM " + this.table_name + " WHERE 1=1";
        jasau values: jol[] = [];
        
        jasau keys: jol[] = json_object_get_keys(criteria);
        jasau i: san = 0;
        
        azirshe (i < keys.length) {
            jasau key: jol = keys[i];
            jasau value: jol = json_object_get_string(criteria, key);
            
            eгер (value != "") {
                sql = sql + " AND " + key + " LIKE ?";
                values = values + ["%" + value + "%"];
            }
            
            i = i + 1;
        }
        
        sql = sql + " ORDER BY created_at DESC";
        
        jasau result: QueryResult = database_query_ishke_engizu(this.connection, sql, values);
        
        eгер (result.success) {
            qaytar result.rows;
        }
        
        qaytar [];
    }
    
    // Janartu - Обновление записи
    atqar janartu(id: jol, entity: JsonObject) -> JsonObject {
        // Обновляем временную метку
        json_object_set_number(entity, "updated_at", current_timestamp());
        
        // Строим SQL запрос
        jasau updates: jol[] = [];
        jasau values: jol[] = [];
        
        jasau keys: jol[] = json_object_get_keys(entity);
        jasau i: san = 0;
        
        azirshe (i < keys.length) {
            jasau key: jol = keys[i];
            jasau value: jol = json_object_get_string(entity, key);
            
            eгер (key != "id" && value != "") {
                updates = updates + [key + " = ?"];
                values = values + [value];
            }
            
            i = i + 1;
        }
        
        eгер (updates.length == 0) {
            jasau error: JsonObject = json_object_create();
            json_object_set_boolean(error, "success", jin);
            json_object_set_string(error, "error", "No fields to update");
            qaytar error;
        }
        
        jasau sql: jol = "UPDATE " + this.table_name + " SET " + 
            string_join(updates, ", ") + " WHERE id = ?";
        values = values + [id];
        
        jasau result: QueryResult = database_query_ishke_engizu(this.connection, sql, values);
        
        eгер (result.success) {
            jasau response: JsonObject = json_object_create();
            json_object_set_boolean(response, "success", jan);
            json_object_set_string(response, "message", "Entity updated successfully");
            qaytar response;
        } aitpese {
            jasau error: JsonObject = json_object_create();
            json_object_set_boolean(error, "success", jin);
            json_object_set_string(error, "error", "Failed to update entity");
            qaytar error;
        }
    }
    
    // Joiu - Удаление записи
    atqar joiu(id: jol) -> aqıqat {
        jasau sql: jol = "DELETE FROM " + this.table_name + " WHERE id = ?";
        jasau result: QueryResult = database_query_ishke_engizu(this.connection, sql, [id]);
        
        qaytar result.success;
    }
}

// Фабрика для создания JOJJ экземпляров
atqar jojj_factory_jasau(table_name: jol, connection: DatabaseConnection) -> JOJJBase {
    jasau jojj: JOJJBase = new JOJJBase(table_name, connection);
    qaytar jojj;
}
