// ulgi_helpers.tng - Shanraq Template Helpers
// Шанрак Үлгі Көмекшілері / Shanraq Template Helpers

// Register ulgi helpers
atqar ulgi_helpers_qosu(qozgaltqys: TemplateEngine) {
    // Conditional helpers
    json_object_set_function(qozgaltqys.helpers, "eger", ulgi_helper_eger);
    json_object_set_function(qozgaltqys.helpers, "basqa", ulgi_helper_basqa);
    json_object_set_function(qozgaltqys.helpers, "while", ulgi_helper_while);
    json_object_set_function(qozgaltqys.helpers, "for", ulgi_helper_for);
    
    // Data helpers
    json_object_set_function(qozgaltqys.helpers, "each", ulgi_helper_each);
    json_object_set_function(qozgaltqys.helpers, "with", ulgi_helper_with);
    json_object_set_function(qozgaltqys.helpers, "lookup", ulgi_helper_lookup);
    
    // String helpers
    json_object_set_function(qozgaltqys.helpers, "concat", ulgi_helper_concat);
    json_object_set_function(qozgaltqys.helpers, "join", ulgi_helper_join);
    json_object_set_function(qozgaltqys.helpers, "split", ulgi_helper_split);
    
    // Math helpers
    json_object_set_function(qozgaltqys.helpers, "add", ulgi_helper_add);
    json_object_set_function(qozgaltqys.helpers, "subtract", ulgi_helper_subtract);
    json_object_set_function(qozgaltqys.helpers, "multiply", ulgi_helper_multiply);
    json_object_set_function(qozgaltqys.helpers, "divide", ulgi_helper_divide);
    
    // Date helpers
    json_object_set_function(qozgaltqys.helpers, "format_date", ulgi_helper_format_date);
    json_object_set_function(qozgaltqys.helpers, "now", ulgi_helper_now);
    json_object_set_function(qozgaltqys.helpers, "age", ulgi_helper_age);
    
    // Array helpers
    json_object_set_function(qozgaltqys.helpers, "length", ulgi_helper_length);
    json_object_set_function(qozgaltqys.helpers, "first", ulgi_helper_first);
    json_object_set_function(qozgaltqys.helpers, "last", ulgi_helper_last);
    json_object_set_function(qozgaltqys.helpers, "sort", ulgi_helper_sort);
    json_object_set_function(qozgaltqys.helpers, "reverse", ulgi_helper_reverse);
    
    // Object helpers
    json_object_set_function(qozgaltqys.helpers, "keys", ulgi_helper_keys);
    json_object_set_function(qozgaltqys.helpers, "values", ulgi_helper_values);
    json_object_set_function(qozgaltqys.helpers, "has", ulgi_helper_has);
    
    // Shanraq-specific helpers
    json_object_set_function(qozgaltqys.helpers, "morpheme", ulgi_helper_morpheme);
    json_object_set_function(qozgaltqys.helpers, "phoneme", ulgi_helper_phoneme);
    json_object_set_function(qozgaltqys.helpers, "archetype", ulgi_helper_archetype);
}

// Conditional helpers
atqar ulgi_helper_eger(condition: aqıqat, true_value: jol, false_value: jol) -> jol {
    eгер (condition == aqıqat_ras) {
        qaytar true_value;
    } basqa {
        qaytar false_value;
    }
}

atqar ulgi_helper_basqa(condition: aqıqat, true_value: jol, false_value: jol) -> jol {
    qaytar ulgi_helper_eger(condition == aqıqat_ras, false_value, true_value);
}

atqar ulgi_helper_while(condition: aqıqat, content: jol) -> jol {
    jasau result: jol = "";
    while (condition == aqıqat_ras) {
        result = result + content;
        // Update condition here
    }
    qaytar result;
}

atqar ulgi_helper_for(start: san, end: san, step: san, content: jol) -> jol {
    jasau result: jol = "";
    san i = start;
    while (i < end) {
        result = result + content;
        i = i + step;
    }
    qaytar result;
}

// Data helpers
atqar ulgi_helper_each(array: jol[], ulgi: jol) -> jol {
    jasau result: jol = "";
    san i = 0;
    while (i < array_uzyn_bolu(array)) {
        jasau item: jol = array[i];
        // Replace {{item}} in ulgi with actual item
        jasau item_ulgi: jol = string_replace(ulgi, "{{item}}", item);
        result = result + item_ulgi;
        i = i + 1;
    }
    qaytar result;
}

atqar ulgi_helper_with(data: JsonObject, ulgi: jol) -> jol {
    // Set data as current context and render ulgi
    qaytar ulgi; // Simplified
}

atqar ulgi_helper_lookup(obj: JsonObject, key: jol) -> jol {
    eгер (json_object_bar_ma(obj, key)) {
        qaytar json_object_get_string(obj, key);
    }
    qaytar "";
}

// String helpers
atqar ulgi_helper_concat(...args: jol[]) -> jol {
    qaytar string_join(args, "");
}

atqar ulgi_helper_join(array: jol[], separator: jol) -> jol {
    qaytar string_join(array, separator);
}

atqar ulgi_helper_split(text: jol, separator: jol) -> jol[] {
    qaytar string_split(text, separator);
}

// Math helpers
atqar ulgi_helper_add(a: san, b: san) -> san {
    qaytar a + b;
}

atqar ulgi_helper_subtract(a: san, b: san) -> san {
    qaytar a - b;
}

atqar ulgi_helper_multiply(a: san, b: san) -> san {
    qaytar a * b;
}

atqar ulgi_helper_divide(a: san, b: san) -> san {
    eгер (b != 0) {
        qaytar a / b;
    }
    qaytar 0;
}

// Date helpers
atqar ulgi_helper_format_date(date: san, format: jol) -> jol {
    // Format date according to format string
    qaytar "2025-10-01"; // Placeholder
}

atqar ulgi_helper_now() -> san {
    qaytar system_time_millis();
}

atqar ulgi_helper_age(birth_date: san) -> san {
    jasau now: san = system_time_millis();
    qaytar (now - birth_date) / (365 * 24 * 60 * 60 * 1000);
}

// Array helpers
atqar ulgi_helper_length(array: jol[]) -> san {
    qaytar array_uzyn_bolu(array);
}

atqar ulgi_helper_first(array: jol[]) -> jol {
    eгер (array_uzyn_bolu(array) > 0) {
        qaytar array[0];
    }
    qaytar "";
}

atqar ulgi_helper_last(array: jol[]) -> jol {
    jasau len: san = array_uzyn_bolu(array);
    eгер (len > 0) {
        qaytar array[len - 1];
    }
    qaytar "";
}

atqar ulgi_helper_sort(array: jol[]) -> jol[] {
    // Simple bubble sort
    jasau sorted: jol[] = array_copy(array);
    san n = array_uzyn_bolu(sorted);
    san i = 0;
    while (i < n - 1) {
        san j = 0;
        while (j < n - i - 1) {
            eгер (sorted[j] > sorted[j + 1]) {
                jasau temp: jol = sorted[j];
                sorted[j] = sorted[j + 1];
                sorted[j + 1] = temp;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    qaytar sorted;
}

atqar ulgi_helper_reverse(array: jol[]) -> jol[] {
    jasau reversed: jol[] = [];
    san i = array_uzyn_bolu(array) - 1;
    while (i >= 0) {
        reversed = reversed + [array[i]];
        i = i - 1;
    }
    qaytar reversed;
}

// Object helpers
atqar ulgi_helper_keys(obj: JsonObject) -> jol[] {
    qaytar json_object_kiltter_alu(obj);
}

atqar ulgi_helper_values(obj: JsonObject) -> jol[] {
    jasau keys: jol[] = json_object_kiltter_alu(obj);
    jasau values: jol[] = [];
    san i = 0;
    while (i < array_uzyn_bolu(keys)) {
        values = values + [json_object_get_string(obj, keys[i])];
        i = i + 1;
    }
    qaytar values;
}

atqar ulgi_helper_has(obj: JsonObject, key: jol) -> aqıqat {
    qaytar json_object_bar_ma(obj, key);
}

// Shanraq-specific helpers
atqar ulgi_helper_morpheme(qozgaltqys: TemplateEngine, word: jol, suffix: jol) -> jol {
    qaytar morpheme_qosymsha_quru(qozgaltqys.morpheme_qozgaltqys, word, suffix);
}

atqar ulgi_helper_phoneme(qozgaltqys: TemplateEngine, text: jol) -> jol {
    qaytar phoneme_negizgi_optim_qoldanu(qozgaltqys.phoneme_qozgaltqys, text);
}

atqar ulgi_helper_archetype(qozgaltqys: TemplateEngine, name: jol, config: JsonObject) -> JsonObject {
    qaytar archetype_negizgi_qoldanu(qozgaltqys.archetype_qozgaltqys, name, config);
}









